
011TaskScheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011a0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08001348  08001348  00011348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001400  08001400  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001400  08001400  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001400  08001400  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001400  08001400  00011400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001404  08001404  00011404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          0000008c  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000f4  200000f4  00020068  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000286d  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000007d2  00000000  00000000  000228ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000200  00000000  00000000  000230d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001b8  00000000  00000000  000232d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d60  00000000  00000000  00023490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001bcb  00000000  00000000  000261f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009de0  00000000  00000000  00027dbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00031b9b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d48  00000000  00000000  00031bf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000068 	.word	0x20000068
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001330 	.word	0x08001330

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000006c 	.word	0x2000006c
 80001e4:	08001330 	.word	0x08001330

080001e8 <led_init>:
{
  for(uint32_t i = 0 ; i < count ; i++);
}

void led_init(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0

	uint32_t *pAhb1En = RCC_AHB1ENR;
 80001ee:	4b19      	ldr	r3, [pc, #100]	; (8000254 <led_init+0x6c>)
 80001f0:	607b      	str	r3, [r7, #4]
	uint32_t *pGpioDMode = GPIOD_MODER;
 80001f2:	4b19      	ldr	r3, [pc, #100]	; (8000258 <led_init+0x70>)
 80001f4:	603b      	str	r3, [r7, #0]

	*pAhb1En |= ( 1 << 3);
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f043 0208 	orr.w	r2, r3, #8
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	601a      	str	r2, [r3, #0]

	// Configure LEDs
	*pGpioDMode |= ( 1 << (2 * LED_GREEN));
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	601a      	str	r2, [r3, #0]
	*pGpioDMode |= ( 1 << (2 * LED_ORANGE));
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	601a      	str	r2, [r3, #0]
	*pGpioDMode |= ( 1 << (2 * LED_RED));
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	601a      	str	r2, [r3, #0]
	*pGpioDMode |= ( 1 << (2 * LED_BLUE));
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	601a      	str	r2, [r3, #0]

    led_off(LED_GREEN);
 8000232:	200c      	movs	r0, #12
 8000234:	f000 f82a 	bl	800028c <led_off>
    led_off(LED_ORANGE);
 8000238:	200d      	movs	r0, #13
 800023a:	f000 f827 	bl	800028c <led_off>
    led_off(LED_RED);
 800023e:	200e      	movs	r0, #14
 8000240:	f000 f824 	bl	800028c <led_off>
    led_off(LED_BLUE);
 8000244:	200f      	movs	r0, #15
 8000246:	f000 f821 	bl	800028c <led_off>
}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40023830 	.word	0x40023830
 8000258:	40020c00 	.word	0x40020c00

0800025c <led_on>:

void led_on(uint8_t led_no)
{
 800025c:	b480      	push	{r7}
 800025e:	b085      	sub	sp, #20
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	71fb      	strb	r3, [r7, #7]
	uint32_t *pGpioDData = GPIOD_ODR;
 8000266:	4b08      	ldr	r3, [pc, #32]	; (8000288 <led_on+0x2c>)
 8000268:	60fb      	str	r3, [r7, #12]
	*pGpioDData |= ( 1 << led_no);
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	79fa      	ldrb	r2, [r7, #7]
 8000270:	2101      	movs	r1, #1
 8000272:	fa01 f202 	lsl.w	r2, r1, r2
 8000276:	431a      	orrs	r2, r3
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	601a      	str	r2, [r3, #0]
}
 800027c:	bf00      	nop
 800027e:	3714      	adds	r7, #20
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	40020c14 	.word	0x40020c14

0800028c <led_off>:

void led_off(uint8_t led_no)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]
	uint32_t *pGpioDData = GPIOD_ODR;
 8000296:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <led_off+0x2c>)
 8000298:	60fb      	str	r3, [r7, #12]
	*pGpioDData &= ~( 1 << led_no);
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	79fa      	ldrb	r2, [r7, #7]
 80002a0:	2101      	movs	r1, #1
 80002a2:	fa01 f202 	lsl.w	r2, r1, r2
 80002a6:	43d2      	mvns	r2, r2
 80002a8:	401a      	ands	r2, r3
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	601a      	str	r2, [r3, #0]
}
 80002ae:	bf00      	nop
 80002b0:	3714      	adds	r7, #20
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr
 80002b8:	40020c14 	.word	0x40020c14

080002bc <main>:
}TCB_t;

TCB_t user_task[MAX_TASKS];

int main(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	enable_processor_faults();
 80002c0:	f000 f81c 	bl	80002fc <enable_processor_faults>

	init_sched_stack(SCHED_STACK_START);
 80002c4:	480a      	ldr	r0, [pc, #40]	; (80002f0 <main+0x34>)
 80002c6:	f000 f898 	bl	80003fa <init_sched_stack>

	init_tasks();
 80002ca:	f000 f89b 	bl	8000404 <init_tasks>

	led_init();
 80002ce:	f7ff ff8b 	bl	80001e8 <led_init>

	init_systick(TICK_HZ);
 80002d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002d6:	f000 f823 	bl	8000320 <init_systick>

	switch_to_psp(); // Going to process threads
 80002da:	f000 f9ad 	bl	8000638 <switch_to_psp>
	user_task[current_task].task_handler(); // Manually start first task (Could use SVC to do this)
 80002de:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <main+0x38>)
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	4a05      	ldr	r2, [pc, #20]	; (80002f8 <main+0x3c>)
 80002e4:	011b      	lsls	r3, r3, #4
 80002e6:	4413      	add	r3, r2
 80002e8:	330c      	adds	r3, #12
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4798      	blx	r3

	/* Loop forever */
	for(;;); // Unreachable because tasks never return
 80002ee:	e7fe      	b.n	80002ee <main+0x32>
 80002f0:	2001ec00 	.word	0x2001ec00
 80002f4:	20000000 	.word	0x20000000
 80002f8:	20000094 	.word	0x20000094

080002fc <enable_processor_faults>:
}

void enable_processor_faults(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
	// System Handler Control and State Register
	uint32_t *pSHCSR = SHCSR;
 8000302:	4b06      	ldr	r3, [pc, #24]	; (800031c <enable_processor_faults+0x20>)
 8000304:	607b      	str	r3, [r7, #4]

	// Enable configurable Exceptions
	// Set bits: [18] USGFAULTENA, [17] BUSFAULTENA, [16] MEMFAULTENA
	*pSHCSR |= (0x7 << 16); // 0b0111 << 16
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f443 22e0 	orr.w	r2, r3, #458752	; 0x70000
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	601a      	str	r2, [r3, #0]
}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	e000ed24 	.word	0xe000ed24

08000320 <init_systick>:

void init_systick(uint32_t tick_hz)
{
 8000320:	b480      	push	{r7}
 8000322:	b087      	sub	sp, #28
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = SYST_RVR;
 8000328:	4b16      	ldr	r3, [pc, #88]	; (8000384 <init_systick+0x64>)
 800032a:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = SYST_CSR;
 800032c:	4b16      	ldr	r3, [pc, #88]	; (8000388 <init_systick+0x68>)
 800032e:	613b      	str	r3, [r7, #16]
	uint32_t count_value = (SYSTICK_CLK/tick_hz)-1;
 8000330:	4a16      	ldr	r2, [pc, #88]	; (800038c <init_systick+0x6c>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	fbb2 f3f3 	udiv	r3, r2, r3
 8000338:	3b01      	subs	r3, #1
 800033a:	60fb      	str	r3, [r7, #12]

	// Clear RVR and load count
	*pSRVR &= ~(0x00FFFFFF);
 800033c:	697b      	ldr	r3, [r7, #20]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	601a      	str	r2, [r3, #0]
	*pSRVR |= count_value;
 8000348:	697b      	ldr	r3, [r7, #20]
 800034a:	681a      	ldr	r2, [r3, #0]
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	431a      	orrs	r2, r3
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	601a      	str	r2, [r3, #0]

	// Configure SysTick
	*pSCSR |= (1 << 1); // Enable exception request
 8000354:	693b      	ldr	r3, [r7, #16]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	f043 0202 	orr.w	r2, r3, #2
 800035c:	693b      	ldr	r3, [r7, #16]
 800035e:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2); // Use processor clock
 8000360:	693b      	ldr	r3, [r7, #16]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	f043 0204 	orr.w	r2, r3, #4
 8000368:	693b      	ldr	r3, [r7, #16]
 800036a:	601a      	str	r2, [r3, #0]

	// Enable SysTick
	*pSCSR |= (1 << 0);
 800036c:	693b      	ldr	r3, [r7, #16]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	f043 0201 	orr.w	r2, r3, #1
 8000374:	693b      	ldr	r3, [r7, #16]
 8000376:	601a      	str	r2, [r3, #0]

}
 8000378:	bf00      	nop
 800037a:	371c      	adds	r7, #28
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	e000e014 	.word	0xe000e014
 8000388:	e000e010 	.word	0xe000e010
 800038c:	00f42400 	.word	0x00f42400

08000390 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	g_tick_count++; // Update global tick count
 8000394:	4b05      	ldr	r3, [pc, #20]	; (80003ac <SysTick_Handler+0x1c>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	3301      	adds	r3, #1
 800039a:	4a04      	ldr	r2, [pc, #16]	; (80003ac <SysTick_Handler+0x1c>)
 800039c:	6013      	str	r3, [r2, #0]

	unblock_tasks(); // Unblock tasks if tick count has been reached
 800039e:	f000 f8b3 	bl	8000508 <unblock_tasks>

	schedule(); // Set PendSV
 80003a2:	f000 f805 	bl	80003b0 <schedule>
}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	20000084 	.word	0x20000084

080003b0 <schedule>:

void schedule(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
	// Set PendSV
	uint32_t *pICSR = ICSR;
 80003b6:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <schedule+0x20>)
 80003b8:	607b      	str	r3, [r7, #4]
	*pICSR |= (1 << 28); // PendSV exception is pending
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	601a      	str	r2, [r3, #0]
}
 80003c6:	bf00      	nop
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr
 80003d0:	e000ed04 	.word	0xe000ed04

080003d4 <PendSV_Handler>:

__attribute__ ((naked)) void PendSV_Handler(void)
{
	__asm volatile ("PUSH {LR}");		// Preserve LR
 80003d4:	b500      	push	{lr}

	// Save context of current task SF1 + SF2 + PSP
	// Stack frame 1 is automatically stored on exception entry

	// 1. Get current PSP
	__asm volatile ("MRS R0, PSP");
 80003d6:	f3ef 8009 	mrs	r0, PSP

	// 2. Store SF2 (R4 - R11)
	__asm volatile ("STMDB R0!,{R4-R11}");	// Push registers to task's stack, R0 is updated with PSP
 80003da:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// 3. Save PSP
	__asm volatile ("BL save_psp");			// Save task's PSP from R0
 80003de:	f000 f8d3 	bl	8000588 <save_psp>

	// Retrieve context of next task

	__asm volatile ("BL select_next_task");	// Advance round-robin
 80003e2:	f000 f8e5 	bl	80005b0 <select_next_task>

	// 1. Retrieve previous PSP
	__asm volatile ("BL get_psp");			// Save task's PSP to R0
 80003e6:	f000 f8bf 	bl	8000568 <get_psp>

	// 2. Retrieve SF2 (R4 - R11)
	__asm volatile ("LDMIA R0!,{R4-R11}");	// Pop registers to task's stack, R0 is updated with PSP
 80003ea:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// 3. Update PSP
	__asm volatile ("MSR PSP, R0");
 80003ee:	f380 8809 	msr	PSP, r0

	// SF1 is automatically fetched by exception exit

	__asm volatile ("POP {LR}");			// Restore LR
 80003f2:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile ("BX LR");				// Return from naked function
 80003f6:	4770      	bx	lr

}
 80003f8:	bf00      	nop

080003fa <init_sched_stack>:

__attribute__ ((naked)) void init_sched_stack(uint32_t sched_stack_top)
{
 80003fa:	4603      	mov	r3, r0
	__asm("MSR MSP, %0"::"r" (sched_stack_top));
 80003fc:	f383 8808 	msr	MSP, r3
	__asm("BX LR");
 8000400:	4770      	bx	lr
}
 8000402:	bf00      	nop

08000404 <init_tasks>:

void init_tasks(void)
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
	// Init TCB
	user_task[0].psp = T0_STACK_START;
 800040a:	4b34      	ldr	r3, [pc, #208]	; (80004dc <init_tasks+0xd8>)
 800040c:	4a34      	ldr	r2, [pc, #208]	; (80004e0 <init_tasks+0xdc>)
 800040e:	601a      	str	r2, [r3, #0]
	user_task[0].task_handler = task0_handler; // Idle Task
 8000410:	4b32      	ldr	r3, [pc, #200]	; (80004dc <init_tasks+0xd8>)
 8000412:	4a34      	ldr	r2, [pc, #208]	; (80004e4 <init_tasks+0xe0>)
 8000414:	60da      	str	r2, [r3, #12]

	user_task[1].psp = T1_STACK_START;
 8000416:	4b31      	ldr	r3, [pc, #196]	; (80004dc <init_tasks+0xd8>)
 8000418:	4a33      	ldr	r2, [pc, #204]	; (80004e8 <init_tasks+0xe4>)
 800041a:	611a      	str	r2, [r3, #16]
	user_task[1].task_handler = task1_handler;
 800041c:	4b2f      	ldr	r3, [pc, #188]	; (80004dc <init_tasks+0xd8>)
 800041e:	4a33      	ldr	r2, [pc, #204]	; (80004ec <init_tasks+0xe8>)
 8000420:	61da      	str	r2, [r3, #28]

	user_task[2].psp = T2_STACK_START;
 8000422:	4b2e      	ldr	r3, [pc, #184]	; (80004dc <init_tasks+0xd8>)
 8000424:	4a32      	ldr	r2, [pc, #200]	; (80004f0 <init_tasks+0xec>)
 8000426:	621a      	str	r2, [r3, #32]
	user_task[2].task_handler = task2_handler;
 8000428:	4b2c      	ldr	r3, [pc, #176]	; (80004dc <init_tasks+0xd8>)
 800042a:	4a32      	ldr	r2, [pc, #200]	; (80004f4 <init_tasks+0xf0>)
 800042c:	62da      	str	r2, [r3, #44]	; 0x2c

	user_task[3].psp = T3_STACK_START;
 800042e:	4b2b      	ldr	r3, [pc, #172]	; (80004dc <init_tasks+0xd8>)
 8000430:	4a31      	ldr	r2, [pc, #196]	; (80004f8 <init_tasks+0xf4>)
 8000432:	631a      	str	r2, [r3, #48]	; 0x30
	user_task[3].task_handler = task3_handler;
 8000434:	4b29      	ldr	r3, [pc, #164]	; (80004dc <init_tasks+0xd8>)
 8000436:	4a31      	ldr	r2, [pc, #196]	; (80004fc <init_tasks+0xf8>)
 8000438:	63da      	str	r2, [r3, #60]	; 0x3c

	user_task[4].psp = T4_STACK_START;
 800043a:	4b28      	ldr	r3, [pc, #160]	; (80004dc <init_tasks+0xd8>)
 800043c:	4a30      	ldr	r2, [pc, #192]	; (8000500 <init_tasks+0xfc>)
 800043e:	641a      	str	r2, [r3, #64]	; 0x40
	user_task[4].task_handler = task4_handler;
 8000440:	4b26      	ldr	r3, [pc, #152]	; (80004dc <init_tasks+0xd8>)
 8000442:	4a30      	ldr	r2, [pc, #192]	; (8000504 <init_tasks+0x100>)
 8000444:	64da      	str	r2, [r3, #76]	; 0x4c

	uint32_t *pPSP;

	for(int i = 0; i < MAX_TASKS; i++)
 8000446:	2300      	movs	r3, #0
 8000448:	60bb      	str	r3, [r7, #8]
 800044a:	e03e      	b.n	80004ca <init_tasks+0xc6>
	{
		// Init TCB
		user_task[i].current_state = TASK_READY;
 800044c:	4a23      	ldr	r2, [pc, #140]	; (80004dc <init_tasks+0xd8>)
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	011b      	lsls	r3, r3, #4
 8000452:	4413      	add	r3, r2
 8000454:	3308      	adds	r3, #8
 8000456:	2200      	movs	r2, #0
 8000458:	701a      	strb	r2, [r3, #0]

		// Init Task Stack
		pPSP = (uint32_t*)user_task[i].psp;
 800045a:	4a20      	ldr	r2, [pc, #128]	; (80004dc <init_tasks+0xd8>)
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	011b      	lsls	r3, r3, #4
 8000460:	4413      	add	r3, r2
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	60fb      	str	r3, [r7, #12]

		pPSP--; // Decrement first (Stack: full descending)
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	3b04      	subs	r3, #4
 800046a:	60fb      	str	r3, [r7, #12]
		*pPSP = INIT_XPSR;
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000472:	601a      	str	r2, [r3, #0]

		pPSP--;
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	3b04      	subs	r3, #4
 8000478:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t)user_task[i].task_handler; // PC
 800047a:	4a18      	ldr	r2, [pc, #96]	; (80004dc <init_tasks+0xd8>)
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	011b      	lsls	r3, r3, #4
 8000480:	4413      	add	r3, r2
 8000482:	330c      	adds	r3, #12
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	461a      	mov	r2, r3
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	601a      	str	r2, [r3, #0]

		pPSP--;
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	3b04      	subs	r3, #4
 8000490:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD; // LR: return to thread with PSP
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	f06f 0202 	mvn.w	r2, #2
 8000498:	601a      	str	r2, [r3, #0]

		for(int j = 0; j < 13; j++)
 800049a:	2300      	movs	r3, #0
 800049c:	607b      	str	r3, [r7, #4]
 800049e:	e008      	b.n	80004b2 <init_tasks+0xae>
		{
			pPSP--;
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	3b04      	subs	r3, #4
 80004a4:	60fb      	str	r3, [r7, #12]
			*pPSP = 0x00000000; // R0 - R12
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < 13; j++)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	3301      	adds	r3, #1
 80004b0:	607b      	str	r3, [r7, #4]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	2b0c      	cmp	r3, #12
 80004b6:	ddf3      	ble.n	80004a0 <init_tasks+0x9c>
		}

		user_task[i].psp = (uint32_t)pPSP;
 80004b8:	68fa      	ldr	r2, [r7, #12]
 80004ba:	4908      	ldr	r1, [pc, #32]	; (80004dc <init_tasks+0xd8>)
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	011b      	lsls	r3, r3, #4
 80004c0:	440b      	add	r3, r1
 80004c2:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_TASKS; i++)
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	3301      	adds	r3, #1
 80004c8:	60bb      	str	r3, [r7, #8]
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	2b04      	cmp	r3, #4
 80004ce:	ddbd      	ble.n	800044c <init_tasks+0x48>
	}
}
 80004d0:	bf00      	nop
 80004d2:	bf00      	nop
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr
 80004dc:	20000094 	.word	0x20000094
 80004e0:	20020000 	.word	0x20020000
 80004e4:	080006ad 	.word	0x080006ad
 80004e8:	2001fc00 	.word	0x2001fc00
 80004ec:	080006b3 	.word	0x080006b3
 80004f0:	2001f800 	.word	0x2001f800
 80004f4:	080006d5 	.word	0x080006d5
 80004f8:	2001f400 	.word	0x2001f400
 80004fc:	080006f7 	.word	0x080006f7
 8000500:	2001f000 	.word	0x2001f000
 8000504:	08000715 	.word	0x08000715

08000508 <unblock_tasks>:

void unblock_tasks(void)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
	for(int i = 1; i < MAX_TASKS; i++) // Start with Task 1 because Idle is never blocked.
 800050e:	2301      	movs	r3, #1
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	e01b      	b.n	800054c <unblock_tasks+0x44>
	{
		if(user_task[i].current_state == TASK_BLOCKED)
 8000514:	4a12      	ldr	r2, [pc, #72]	; (8000560 <unblock_tasks+0x58>)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	011b      	lsls	r3, r3, #4
 800051a:	4413      	add	r3, r2
 800051c:	3308      	adds	r3, #8
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2bff      	cmp	r3, #255	; 0xff
 8000522:	d110      	bne.n	8000546 <unblock_tasks+0x3e>
		{
			if(user_task[i].block_count == g_tick_count)
 8000524:	4a0e      	ldr	r2, [pc, #56]	; (8000560 <unblock_tasks+0x58>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	011b      	lsls	r3, r3, #4
 800052a:	4413      	add	r3, r2
 800052c:	3304      	adds	r3, #4
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <unblock_tasks+0x5c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	429a      	cmp	r2, r3
 8000536:	d106      	bne.n	8000546 <unblock_tasks+0x3e>
			{
				user_task[i].current_state = TASK_READY;
 8000538:	4a09      	ldr	r2, [pc, #36]	; (8000560 <unblock_tasks+0x58>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	011b      	lsls	r3, r3, #4
 800053e:	4413      	add	r3, r2
 8000540:	3308      	adds	r3, #8
 8000542:	2200      	movs	r2, #0
 8000544:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i < MAX_TASKS; i++) // Start with Task 1 because Idle is never blocked.
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	3301      	adds	r3, #1
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2b04      	cmp	r3, #4
 8000550:	dde0      	ble.n	8000514 <unblock_tasks+0xc>
			}
		}
	}
}
 8000552:	bf00      	nop
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20000094 	.word	0x20000094
 8000564:	20000084 	.word	0x20000084

08000568 <get_psp>:

uint32_t get_psp(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
	return user_task[current_task].psp; // Returned via R0 per AAPCS
 800056c:	4b04      	ldr	r3, [pc, #16]	; (8000580 <get_psp+0x18>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	4a04      	ldr	r2, [pc, #16]	; (8000584 <get_psp+0x1c>)
 8000572:	011b      	lsls	r3, r3, #4
 8000574:	4413      	add	r3, r2
 8000576:	681b      	ldr	r3, [r3, #0]
}
 8000578:	4618      	mov	r0, r3
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr
 8000580:	20000000 	.word	0x20000000
 8000584:	20000094 	.word	0x20000094

08000588 <save_psp>:

void save_psp(uint32_t current_psp)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	user_task[current_task].psp = current_psp;
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <save_psp+0x20>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	4a05      	ldr	r2, [pc, #20]	; (80005ac <save_psp+0x24>)
 8000596:	011b      	lsls	r3, r3, #4
 8000598:	4413      	add	r3, r2
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	601a      	str	r2, [r3, #0]
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr
 80005a8:	20000000 	.word	0x20000000
 80005ac:	20000094 	.word	0x20000094

080005b0 <select_next_task>:

void select_next_task(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
	uint8_t state = TASK_BLOCKED;
 80005b6:	23ff      	movs	r3, #255	; 0xff
 80005b8:	71fb      	strb	r3, [r7, #7]

	for(int i = 0; i < MAX_TASKS; i++)
 80005ba:	2300      	movs	r3, #0
 80005bc:	603b      	str	r3, [r7, #0]
 80005be:	e024      	b.n	800060a <select_next_task+0x5a>
	{
		current_task++;
 80005c0:	4b1a      	ldr	r3, [pc, #104]	; (800062c <select_next_task+0x7c>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	3301      	adds	r3, #1
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	4b18      	ldr	r3, [pc, #96]	; (800062c <select_next_task+0x7c>)
 80005ca:	701a      	strb	r2, [r3, #0]
		current_task %= MAX_TASKS; // MAX -> 0
 80005cc:	4b17      	ldr	r3, [pc, #92]	; (800062c <select_next_task+0x7c>)
 80005ce:	781a      	ldrb	r2, [r3, #0]
 80005d0:	4b17      	ldr	r3, [pc, #92]	; (8000630 <select_next_task+0x80>)
 80005d2:	fba3 1302 	umull	r1, r3, r3, r2
 80005d6:	0899      	lsrs	r1, r3, #2
 80005d8:	460b      	mov	r3, r1
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	440b      	add	r3, r1
 80005de:	1ad3      	subs	r3, r2, r3
 80005e0:	b2da      	uxtb	r2, r3
 80005e2:	4b12      	ldr	r3, [pc, #72]	; (800062c <select_next_task+0x7c>)
 80005e4:	701a      	strb	r2, [r3, #0]
		state = user_task[current_task].current_state;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <select_next_task+0x7c>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	4a12      	ldr	r2, [pc, #72]	; (8000634 <select_next_task+0x84>)
 80005ec:	011b      	lsls	r3, r3, #4
 80005ee:	4413      	add	r3, r2
 80005f0:	3308      	adds	r3, #8
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	71fb      	strb	r3, [r7, #7]
		if((current_task) && (state == TASK_READY))
 80005f6:	4b0d      	ldr	r3, [pc, #52]	; (800062c <select_next_task+0x7c>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d002      	beq.n	8000604 <select_next_task+0x54>
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d006      	beq.n	8000612 <select_next_task+0x62>
	for(int i = 0; i < MAX_TASKS; i++)
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	3301      	adds	r3, #1
 8000608:	603b      	str	r3, [r7, #0]
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	2b04      	cmp	r3, #4
 800060e:	ddd7      	ble.n	80005c0 <select_next_task+0x10>
 8000610:	e000      	b.n	8000614 <select_next_task+0x64>
			break; // Non-idle tasks is ready
 8000612:	bf00      	nop
	}

	if(state == TASK_BLOCKED) // All tasks are blocked
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	2bff      	cmp	r3, #255	; 0xff
 8000618:	d102      	bne.n	8000620 <select_next_task+0x70>
		current_task = 0; // Select idle task
 800061a:	4b04      	ldr	r3, [pc, #16]	; (800062c <select_next_task+0x7c>)
 800061c:	2200      	movs	r2, #0
 800061e:	701a      	strb	r2, [r3, #0]
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000000 	.word	0x20000000
 8000630:	cccccccd 	.word	0xcccccccd
 8000634:	20000094 	.word	0x20000094

08000638 <switch_to_psp>:

__attribute__ ((naked)) void switch_to_psp(void)
{
	__asm volatile ("PUSH {LR}");		// Preserve LR
 8000638:	b500      	push	{lr}

	// Initialize PSP with task's stack top
	__asm volatile ("BL get_psp");		// Get current task's PSP
 800063a:	f7ff ff95 	bl	8000568 <get_psp>
	__asm volatile ("MSR PSP, R0");		// Init PSP (R0 holds return value of get_psp)
 800063e:	f380 8809 	msr	PSP, r0

	__asm volatile ("POP {LR}");		// Restore LR
 8000642:	f85d eb04 	ldr.w	lr, [sp], #4

	// Switch SP to PSP
	__asm volatile ("MRS R0, CONTROL");
 8000646:	f3ef 8014 	mrs	r0, CONTROL
	__asm volatile ("ORR R0, #0x2");	// SPSEL = 1 (PSP)
 800064a:	f040 0002 	orr.w	r0, r0, #2
	__asm volatile ("MSR CONTROL, R0");
 800064e:	f380 8814 	msr	CONTROL, r0

	__asm volatile ("BX LR");			// Return from naked function
 8000652:	4770      	bx	lr

}
 8000654:	bf00      	nop
	...

08000658 <task_delay>:

void task_delay(uint32_t blocked_ticks)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	// This task function manipulates global variables
	// Serialize access to globals by briefly disabling interrupts
	INTERRUPT_DISABLE();
 8000660:	b672      	cpsid	i

	if(current_task) // Not idle task
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <task_delay+0x48>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d015      	beq.n	8000696 <task_delay+0x3e>
	{
		user_task[current_task].block_count = g_tick_count + blocked_ticks;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <task_delay+0x4c>)
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <task_delay+0x48>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	4618      	mov	r0, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	441a      	add	r2, r3
 8000678:	490b      	ldr	r1, [pc, #44]	; (80006a8 <task_delay+0x50>)
 800067a:	0103      	lsls	r3, r0, #4
 800067c:	440b      	add	r3, r1
 800067e:	3304      	adds	r3, #4
 8000680:	601a      	str	r2, [r3, #0]
		user_task[current_task].current_state = TASK_BLOCKED;
 8000682:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <task_delay+0x48>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	4a08      	ldr	r2, [pc, #32]	; (80006a8 <task_delay+0x50>)
 8000688:	011b      	lsls	r3, r3, #4
 800068a:	4413      	add	r3, r2
 800068c:	3308      	adds	r3, #8
 800068e:	22ff      	movs	r2, #255	; 0xff
 8000690:	701a      	strb	r2, [r3, #0]
		schedule();
 8000692:	f7ff fe8d 	bl	80003b0 <schedule>
	}

	// Enable Interrupts
	INTERRUPT_ENABLE();
 8000696:	b662      	cpsie	i

}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000000 	.word	0x20000000
 80006a4:	20000084 	.word	0x20000084
 80006a8:	20000094 	.word	0x20000094

080006ac <task0_handler>:

void task0_handler(void) // Idle Task
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
	while(1);
 80006b0:	e7fe      	b.n	80006b0 <task0_handler+0x4>

080006b2 <task1_handler>:
}

void task1_handler(void)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_GREEN);
 80006b6:	200c      	movs	r0, #12
 80006b8:	f7ff fdd0 	bl	800025c <led_on>
		task_delay(1000);
 80006bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006c0:	f7ff ffca 	bl	8000658 <task_delay>
		led_off(LED_GREEN);
 80006c4:	200c      	movs	r0, #12
 80006c6:	f7ff fde1 	bl	800028c <led_off>
		task_delay(1000);
 80006ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ce:	f7ff ffc3 	bl	8000658 <task_delay>
		led_on(LED_GREEN);
 80006d2:	e7f0      	b.n	80006b6 <task1_handler+0x4>

080006d4 <task2_handler>:
	}
}

void task2_handler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_ORANGE);
 80006d8:	200d      	movs	r0, #13
 80006da:	f7ff fdbf 	bl	800025c <led_on>
		task_delay(500);
 80006de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006e2:	f7ff ffb9 	bl	8000658 <task_delay>
		led_off(LED_ORANGE);
 80006e6:	200d      	movs	r0, #13
 80006e8:	f7ff fdd0 	bl	800028c <led_off>
		task_delay(500);
 80006ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f0:	f7ff ffb2 	bl	8000658 <task_delay>
		led_on(LED_ORANGE);
 80006f4:	e7f0      	b.n	80006d8 <task2_handler+0x4>

080006f6 <task3_handler>:
	}
}

void task3_handler(void)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_RED);
 80006fa:	200e      	movs	r0, #14
 80006fc:	f7ff fdae 	bl	800025c <led_on>
		task_delay(250);
 8000700:	20fa      	movs	r0, #250	; 0xfa
 8000702:	f7ff ffa9 	bl	8000658 <task_delay>
		led_off(LED_RED);
 8000706:	200e      	movs	r0, #14
 8000708:	f7ff fdc0 	bl	800028c <led_off>
		task_delay(250);
 800070c:	20fa      	movs	r0, #250	; 0xfa
 800070e:	f7ff ffa3 	bl	8000658 <task_delay>
		led_on(LED_RED);
 8000712:	e7f2      	b.n	80006fa <task3_handler+0x4>

08000714 <task4_handler>:
	}
}

void task4_handler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_BLUE);
 8000718:	200f      	movs	r0, #15
 800071a:	f7ff fd9f 	bl	800025c <led_on>
		task_delay(125);
 800071e:	207d      	movs	r0, #125	; 0x7d
 8000720:	f7ff ff9a 	bl	8000658 <task_delay>
		led_off(LED_BLUE);
 8000724:	200f      	movs	r0, #15
 8000726:	f7ff fdb1 	bl	800028c <led_off>
		task_delay(125);
 800072a:	207d      	movs	r0, #125	; 0x7d
 800072c:	f7ff ff94 	bl	8000658 <task_delay>
		led_on(LED_BLUE);
 8000730:	e7f2      	b.n	8000718 <task4_handler+0x4>
	...

08000734 <HardFault_Handler>:
	}
}

void HardFault_Handler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	printf("HardFault Exception\n");
 8000738:	4801      	ldr	r0, [pc, #4]	; (8000740 <HardFault_Handler+0xc>)
 800073a:	f000 f9a3 	bl	8000a84 <puts>
	while(1);
 800073e:	e7fe      	b.n	800073e <HardFault_Handler+0xa>
 8000740:	08001348 	.word	0x08001348

08000744 <BusFault_Handler>:
	printf("UsageFault Exception\n");
	while(1);
}

void BusFault_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	printf("BusFault Exception\n");
 8000748:	4801      	ldr	r0, [pc, #4]	; (8000750 <BusFault_Handler+0xc>)
 800074a:	f000 f99b 	bl	8000a84 <puts>
	while(1);
 800074e:	e7fe      	b.n	800074e <BusFault_Handler+0xa>
 8000750:	08001374 	.word	0x08001374

08000754 <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	printf("MemFault Exception\n");
 8000758:	4801      	ldr	r0, [pc, #4]	; (8000760 <MemManage_Handler+0xc>)
 800075a:	f000 f993 	bl	8000a84 <puts>
	while(1);
 800075e:	e7fe      	b.n	800075e <MemManage_Handler+0xa>
 8000760:	08001388 	.word	0x08001388

08000764 <ITM_SendChar>:
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

// This function writes to the ITM FIFO > stimulus port 0
void ITM_SendChar(uint8_t ch)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <ITM_SendChar+0x44>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a0d      	ldr	r2, [pc, #52]	; (80007a8 <ITM_SendChar+0x44>)
 8000774:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000778:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <ITM_SendChar+0x48>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a0b      	ldr	r2, [pc, #44]	; (80007ac <ITM_SendChar+0x48>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000786:	bf00      	nop
 8000788:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	2b00      	cmp	r3, #0
 8000794:	d0f8      	beq.n	8000788 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000796:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	6013      	str	r3, [r2, #0]
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr
 80007a8:	e000edfc 	.word	0xe000edfc
 80007ac:	e0000e00 	.word	0xe0000e00

080007b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
 80007c0:	e00a      	b.n	80007d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007c2:	f3af 8000 	nop.w
 80007c6:	4601      	mov	r1, r0
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	60ba      	str	r2, [r7, #8]
 80007ce:	b2ca      	uxtb	r2, r1
 80007d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	3301      	adds	r3, #1
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	697a      	ldr	r2, [r7, #20]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	429a      	cmp	r2, r3
 80007de:	dbf0      	blt.n	80007c2 <_read+0x12>
	}

return len;
 80007e0:	687b      	ldr	r3, [r7, #4]
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b086      	sub	sp, #24
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	60f8      	str	r0, [r7, #12]
 80007f2:	60b9      	str	r1, [r7, #8]
 80007f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	e009      	b.n	8000810 <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	1c5a      	adds	r2, r3, #1
 8000800:	60ba      	str	r2, [r7, #8]
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ffad 	bl	8000764 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	3301      	adds	r3, #1
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697a      	ldr	r2, [r7, #20]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	429a      	cmp	r2, r3
 8000816:	dbf1      	blt.n	80007fc <_write+0x12>
	}
	return len;
 8000818:	687b      	ldr	r3, [r7, #4]
}
 800081a:	4618      	mov	r0, r3
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <_close>:

int _close(int file)
{
 8000822:	b480      	push	{r7}
 8000824:	b083      	sub	sp, #12
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
	return -1;
 800082a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800082e:	4618      	mov	r0, r3
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr

08000838 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000848:	605a      	str	r2, [r3, #4]
	return 0;
 800084a:	2300      	movs	r3, #0
}
 800084c:	4618      	mov	r0, r3
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr

08000856 <_isatty>:

int _isatty(int file)
{
 8000856:	b480      	push	{r7}
 8000858:	b083      	sub	sp, #12
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
	return 1;
 800085e:	2301      	movs	r3, #1
}
 8000860:	4618      	mov	r0, r3
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr

0800086a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800086a:	b480      	push	{r7}
 800086c:	b085      	sub	sp, #20
 800086e:	af00      	add	r7, sp, #0
 8000870:	60f8      	str	r0, [r7, #12]
 8000872:	60b9      	str	r1, [r7, #8]
 8000874:	607a      	str	r2, [r7, #4]
	return 0;
 8000876:	2300      	movs	r3, #0
}
 8000878:	4618      	mov	r0, r3
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
	...

08000884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800088c:	4a14      	ldr	r2, [pc, #80]	; (80008e0 <_sbrk+0x5c>)
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <_sbrk+0x60>)
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000898:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <_sbrk+0x64>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d102      	bne.n	80008a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <_sbrk+0x64>)
 80008a2:	4a12      	ldr	r2, [pc, #72]	; (80008ec <_sbrk+0x68>)
 80008a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <_sbrk+0x64>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4413      	add	r3, r2
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d207      	bcs.n	80008c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008b4:	f000 f846 	bl	8000944 <__errno>
 80008b8:	4603      	mov	r3, r0
 80008ba:	220c      	movs	r2, #12
 80008bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008c2:	e009      	b.n	80008d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <_sbrk+0x64>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ca:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <_sbrk+0x64>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4413      	add	r3, r2
 80008d2:	4a05      	ldr	r2, [pc, #20]	; (80008e8 <_sbrk+0x64>)
 80008d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008d6:	68fb      	ldr	r3, [r7, #12]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20020000 	.word	0x20020000
 80008e4:	00000400 	.word	0x00000400
 80008e8:	20000088 	.word	0x20000088
 80008ec:	200000f8 	.word	0x200000f8

080008f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008f0:	480d      	ldr	r0, [pc, #52]	; (8000928 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008f2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f8:	480c      	ldr	r0, [pc, #48]	; (800092c <LoopForever+0x6>)
  ldr r1, =_edata
 80008fa:	490d      	ldr	r1, [pc, #52]	; (8000930 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008fc:	4a0d      	ldr	r2, [pc, #52]	; (8000934 <LoopForever+0xe>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000900:	e002      	b.n	8000908 <LoopCopyDataInit>

08000902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000906:	3304      	adds	r3, #4

08000908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800090c:	d3f9      	bcc.n	8000902 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090e:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000910:	4c0a      	ldr	r4, [pc, #40]	; (800093c <LoopForever+0x16>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000914:	e001      	b.n	800091a <LoopFillZerobss>

08000916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000918:	3204      	adds	r2, #4

0800091a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800091c:	d3fb      	bcc.n	8000916 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800091e:	f000 f817 	bl	8000950 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000922:	f7ff fccb 	bl	80002bc <main>

08000926 <LoopForever>:

LoopForever:
    b LoopForever
 8000926:	e7fe      	b.n	8000926 <LoopForever>
  ldr   r0, =_estack
 8000928:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800092c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000930:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000934:	08001408 	.word	0x08001408
  ldr r2, =_sbss
 8000938:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800093c:	200000f4 	.word	0x200000f4

08000940 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000940:	e7fe      	b.n	8000940 <ADC_IRQHandler>
	...

08000944 <__errno>:
 8000944:	4b01      	ldr	r3, [pc, #4]	; (800094c <__errno+0x8>)
 8000946:	6818      	ldr	r0, [r3, #0]
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	20000004 	.word	0x20000004

08000950 <__libc_init_array>:
 8000950:	b570      	push	{r4, r5, r6, lr}
 8000952:	4d0d      	ldr	r5, [pc, #52]	; (8000988 <__libc_init_array+0x38>)
 8000954:	4c0d      	ldr	r4, [pc, #52]	; (800098c <__libc_init_array+0x3c>)
 8000956:	1b64      	subs	r4, r4, r5
 8000958:	10a4      	asrs	r4, r4, #2
 800095a:	2600      	movs	r6, #0
 800095c:	42a6      	cmp	r6, r4
 800095e:	d109      	bne.n	8000974 <__libc_init_array+0x24>
 8000960:	4d0b      	ldr	r5, [pc, #44]	; (8000990 <__libc_init_array+0x40>)
 8000962:	4c0c      	ldr	r4, [pc, #48]	; (8000994 <__libc_init_array+0x44>)
 8000964:	f000 fce4 	bl	8001330 <_init>
 8000968:	1b64      	subs	r4, r4, r5
 800096a:	10a4      	asrs	r4, r4, #2
 800096c:	2600      	movs	r6, #0
 800096e:	42a6      	cmp	r6, r4
 8000970:	d105      	bne.n	800097e <__libc_init_array+0x2e>
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	f855 3b04 	ldr.w	r3, [r5], #4
 8000978:	4798      	blx	r3
 800097a:	3601      	adds	r6, #1
 800097c:	e7ee      	b.n	800095c <__libc_init_array+0xc>
 800097e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000982:	4798      	blx	r3
 8000984:	3601      	adds	r6, #1
 8000986:	e7f2      	b.n	800096e <__libc_init_array+0x1e>
 8000988:	08001400 	.word	0x08001400
 800098c:	08001400 	.word	0x08001400
 8000990:	08001400 	.word	0x08001400
 8000994:	08001404 	.word	0x08001404

08000998 <memset>:
 8000998:	4402      	add	r2, r0
 800099a:	4603      	mov	r3, r0
 800099c:	4293      	cmp	r3, r2
 800099e:	d100      	bne.n	80009a2 <memset+0xa>
 80009a0:	4770      	bx	lr
 80009a2:	f803 1b01 	strb.w	r1, [r3], #1
 80009a6:	e7f9      	b.n	800099c <memset+0x4>

080009a8 <_puts_r>:
 80009a8:	b570      	push	{r4, r5, r6, lr}
 80009aa:	460e      	mov	r6, r1
 80009ac:	4605      	mov	r5, r0
 80009ae:	b118      	cbz	r0, 80009b8 <_puts_r+0x10>
 80009b0:	6983      	ldr	r3, [r0, #24]
 80009b2:	b90b      	cbnz	r3, 80009b8 <_puts_r+0x10>
 80009b4:	f000 fa48 	bl	8000e48 <__sinit>
 80009b8:	69ab      	ldr	r3, [r5, #24]
 80009ba:	68ac      	ldr	r4, [r5, #8]
 80009bc:	b913      	cbnz	r3, 80009c4 <_puts_r+0x1c>
 80009be:	4628      	mov	r0, r5
 80009c0:	f000 fa42 	bl	8000e48 <__sinit>
 80009c4:	4b2c      	ldr	r3, [pc, #176]	; (8000a78 <_puts_r+0xd0>)
 80009c6:	429c      	cmp	r4, r3
 80009c8:	d120      	bne.n	8000a0c <_puts_r+0x64>
 80009ca:	686c      	ldr	r4, [r5, #4]
 80009cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80009ce:	07db      	lsls	r3, r3, #31
 80009d0:	d405      	bmi.n	80009de <_puts_r+0x36>
 80009d2:	89a3      	ldrh	r3, [r4, #12]
 80009d4:	0598      	lsls	r0, r3, #22
 80009d6:	d402      	bmi.n	80009de <_puts_r+0x36>
 80009d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80009da:	f000 fad3 	bl	8000f84 <__retarget_lock_acquire_recursive>
 80009de:	89a3      	ldrh	r3, [r4, #12]
 80009e0:	0719      	lsls	r1, r3, #28
 80009e2:	d51d      	bpl.n	8000a20 <_puts_r+0x78>
 80009e4:	6923      	ldr	r3, [r4, #16]
 80009e6:	b1db      	cbz	r3, 8000a20 <_puts_r+0x78>
 80009e8:	3e01      	subs	r6, #1
 80009ea:	68a3      	ldr	r3, [r4, #8]
 80009ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80009f0:	3b01      	subs	r3, #1
 80009f2:	60a3      	str	r3, [r4, #8]
 80009f4:	bb39      	cbnz	r1, 8000a46 <_puts_r+0x9e>
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	da38      	bge.n	8000a6c <_puts_r+0xc4>
 80009fa:	4622      	mov	r2, r4
 80009fc:	210a      	movs	r1, #10
 80009fe:	4628      	mov	r0, r5
 8000a00:	f000 f848 	bl	8000a94 <__swbuf_r>
 8000a04:	3001      	adds	r0, #1
 8000a06:	d011      	beq.n	8000a2c <_puts_r+0x84>
 8000a08:	250a      	movs	r5, #10
 8000a0a:	e011      	b.n	8000a30 <_puts_r+0x88>
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <_puts_r+0xd4>)
 8000a0e:	429c      	cmp	r4, r3
 8000a10:	d101      	bne.n	8000a16 <_puts_r+0x6e>
 8000a12:	68ac      	ldr	r4, [r5, #8]
 8000a14:	e7da      	b.n	80009cc <_puts_r+0x24>
 8000a16:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <_puts_r+0xd8>)
 8000a18:	429c      	cmp	r4, r3
 8000a1a:	bf08      	it	eq
 8000a1c:	68ec      	ldreq	r4, [r5, #12]
 8000a1e:	e7d5      	b.n	80009cc <_puts_r+0x24>
 8000a20:	4621      	mov	r1, r4
 8000a22:	4628      	mov	r0, r5
 8000a24:	f000 f888 	bl	8000b38 <__swsetup_r>
 8000a28:	2800      	cmp	r0, #0
 8000a2a:	d0dd      	beq.n	80009e8 <_puts_r+0x40>
 8000a2c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000a30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a32:	07da      	lsls	r2, r3, #31
 8000a34:	d405      	bmi.n	8000a42 <_puts_r+0x9a>
 8000a36:	89a3      	ldrh	r3, [r4, #12]
 8000a38:	059b      	lsls	r3, r3, #22
 8000a3a:	d402      	bmi.n	8000a42 <_puts_r+0x9a>
 8000a3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a3e:	f000 faa2 	bl	8000f86 <__retarget_lock_release_recursive>
 8000a42:	4628      	mov	r0, r5
 8000a44:	bd70      	pop	{r4, r5, r6, pc}
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	da04      	bge.n	8000a54 <_puts_r+0xac>
 8000a4a:	69a2      	ldr	r2, [r4, #24]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	dc06      	bgt.n	8000a5e <_puts_r+0xb6>
 8000a50:	290a      	cmp	r1, #10
 8000a52:	d004      	beq.n	8000a5e <_puts_r+0xb6>
 8000a54:	6823      	ldr	r3, [r4, #0]
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	6022      	str	r2, [r4, #0]
 8000a5a:	7019      	strb	r1, [r3, #0]
 8000a5c:	e7c5      	b.n	80009ea <_puts_r+0x42>
 8000a5e:	4622      	mov	r2, r4
 8000a60:	4628      	mov	r0, r5
 8000a62:	f000 f817 	bl	8000a94 <__swbuf_r>
 8000a66:	3001      	adds	r0, #1
 8000a68:	d1bf      	bne.n	80009ea <_puts_r+0x42>
 8000a6a:	e7df      	b.n	8000a2c <_puts_r+0x84>
 8000a6c:	6823      	ldr	r3, [r4, #0]
 8000a6e:	250a      	movs	r5, #10
 8000a70:	1c5a      	adds	r2, r3, #1
 8000a72:	6022      	str	r2, [r4, #0]
 8000a74:	701d      	strb	r5, [r3, #0]
 8000a76:	e7db      	b.n	8000a30 <_puts_r+0x88>
 8000a78:	080013c0 	.word	0x080013c0
 8000a7c:	080013e0 	.word	0x080013e0
 8000a80:	080013a0 	.word	0x080013a0

08000a84 <puts>:
 8000a84:	4b02      	ldr	r3, [pc, #8]	; (8000a90 <puts+0xc>)
 8000a86:	4601      	mov	r1, r0
 8000a88:	6818      	ldr	r0, [r3, #0]
 8000a8a:	f7ff bf8d 	b.w	80009a8 <_puts_r>
 8000a8e:	bf00      	nop
 8000a90:	20000004 	.word	0x20000004

08000a94 <__swbuf_r>:
 8000a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a96:	460e      	mov	r6, r1
 8000a98:	4614      	mov	r4, r2
 8000a9a:	4605      	mov	r5, r0
 8000a9c:	b118      	cbz	r0, 8000aa6 <__swbuf_r+0x12>
 8000a9e:	6983      	ldr	r3, [r0, #24]
 8000aa0:	b90b      	cbnz	r3, 8000aa6 <__swbuf_r+0x12>
 8000aa2:	f000 f9d1 	bl	8000e48 <__sinit>
 8000aa6:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <__swbuf_r+0x98>)
 8000aa8:	429c      	cmp	r4, r3
 8000aaa:	d12b      	bne.n	8000b04 <__swbuf_r+0x70>
 8000aac:	686c      	ldr	r4, [r5, #4]
 8000aae:	69a3      	ldr	r3, [r4, #24]
 8000ab0:	60a3      	str	r3, [r4, #8]
 8000ab2:	89a3      	ldrh	r3, [r4, #12]
 8000ab4:	071a      	lsls	r2, r3, #28
 8000ab6:	d52f      	bpl.n	8000b18 <__swbuf_r+0x84>
 8000ab8:	6923      	ldr	r3, [r4, #16]
 8000aba:	b36b      	cbz	r3, 8000b18 <__swbuf_r+0x84>
 8000abc:	6923      	ldr	r3, [r4, #16]
 8000abe:	6820      	ldr	r0, [r4, #0]
 8000ac0:	1ac0      	subs	r0, r0, r3
 8000ac2:	6963      	ldr	r3, [r4, #20]
 8000ac4:	b2f6      	uxtb	r6, r6
 8000ac6:	4283      	cmp	r3, r0
 8000ac8:	4637      	mov	r7, r6
 8000aca:	dc04      	bgt.n	8000ad6 <__swbuf_r+0x42>
 8000acc:	4621      	mov	r1, r4
 8000ace:	4628      	mov	r0, r5
 8000ad0:	f000 f926 	bl	8000d20 <_fflush_r>
 8000ad4:	bb30      	cbnz	r0, 8000b24 <__swbuf_r+0x90>
 8000ad6:	68a3      	ldr	r3, [r4, #8]
 8000ad8:	3b01      	subs	r3, #1
 8000ada:	60a3      	str	r3, [r4, #8]
 8000adc:	6823      	ldr	r3, [r4, #0]
 8000ade:	1c5a      	adds	r2, r3, #1
 8000ae0:	6022      	str	r2, [r4, #0]
 8000ae2:	701e      	strb	r6, [r3, #0]
 8000ae4:	6963      	ldr	r3, [r4, #20]
 8000ae6:	3001      	adds	r0, #1
 8000ae8:	4283      	cmp	r3, r0
 8000aea:	d004      	beq.n	8000af6 <__swbuf_r+0x62>
 8000aec:	89a3      	ldrh	r3, [r4, #12]
 8000aee:	07db      	lsls	r3, r3, #31
 8000af0:	d506      	bpl.n	8000b00 <__swbuf_r+0x6c>
 8000af2:	2e0a      	cmp	r6, #10
 8000af4:	d104      	bne.n	8000b00 <__swbuf_r+0x6c>
 8000af6:	4621      	mov	r1, r4
 8000af8:	4628      	mov	r0, r5
 8000afa:	f000 f911 	bl	8000d20 <_fflush_r>
 8000afe:	b988      	cbnz	r0, 8000b24 <__swbuf_r+0x90>
 8000b00:	4638      	mov	r0, r7
 8000b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <__swbuf_r+0x9c>)
 8000b06:	429c      	cmp	r4, r3
 8000b08:	d101      	bne.n	8000b0e <__swbuf_r+0x7a>
 8000b0a:	68ac      	ldr	r4, [r5, #8]
 8000b0c:	e7cf      	b.n	8000aae <__swbuf_r+0x1a>
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <__swbuf_r+0xa0>)
 8000b10:	429c      	cmp	r4, r3
 8000b12:	bf08      	it	eq
 8000b14:	68ec      	ldreq	r4, [r5, #12]
 8000b16:	e7ca      	b.n	8000aae <__swbuf_r+0x1a>
 8000b18:	4621      	mov	r1, r4
 8000b1a:	4628      	mov	r0, r5
 8000b1c:	f000 f80c 	bl	8000b38 <__swsetup_r>
 8000b20:	2800      	cmp	r0, #0
 8000b22:	d0cb      	beq.n	8000abc <__swbuf_r+0x28>
 8000b24:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000b28:	e7ea      	b.n	8000b00 <__swbuf_r+0x6c>
 8000b2a:	bf00      	nop
 8000b2c:	080013c0 	.word	0x080013c0
 8000b30:	080013e0 	.word	0x080013e0
 8000b34:	080013a0 	.word	0x080013a0

08000b38 <__swsetup_r>:
 8000b38:	4b32      	ldr	r3, [pc, #200]	; (8000c04 <__swsetup_r+0xcc>)
 8000b3a:	b570      	push	{r4, r5, r6, lr}
 8000b3c:	681d      	ldr	r5, [r3, #0]
 8000b3e:	4606      	mov	r6, r0
 8000b40:	460c      	mov	r4, r1
 8000b42:	b125      	cbz	r5, 8000b4e <__swsetup_r+0x16>
 8000b44:	69ab      	ldr	r3, [r5, #24]
 8000b46:	b913      	cbnz	r3, 8000b4e <__swsetup_r+0x16>
 8000b48:	4628      	mov	r0, r5
 8000b4a:	f000 f97d 	bl	8000e48 <__sinit>
 8000b4e:	4b2e      	ldr	r3, [pc, #184]	; (8000c08 <__swsetup_r+0xd0>)
 8000b50:	429c      	cmp	r4, r3
 8000b52:	d10f      	bne.n	8000b74 <__swsetup_r+0x3c>
 8000b54:	686c      	ldr	r4, [r5, #4]
 8000b56:	89a3      	ldrh	r3, [r4, #12]
 8000b58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000b5c:	0719      	lsls	r1, r3, #28
 8000b5e:	d42c      	bmi.n	8000bba <__swsetup_r+0x82>
 8000b60:	06dd      	lsls	r5, r3, #27
 8000b62:	d411      	bmi.n	8000b88 <__swsetup_r+0x50>
 8000b64:	2309      	movs	r3, #9
 8000b66:	6033      	str	r3, [r6, #0]
 8000b68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000b6c:	81a3      	strh	r3, [r4, #12]
 8000b6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b72:	e03e      	b.n	8000bf2 <__swsetup_r+0xba>
 8000b74:	4b25      	ldr	r3, [pc, #148]	; (8000c0c <__swsetup_r+0xd4>)
 8000b76:	429c      	cmp	r4, r3
 8000b78:	d101      	bne.n	8000b7e <__swsetup_r+0x46>
 8000b7a:	68ac      	ldr	r4, [r5, #8]
 8000b7c:	e7eb      	b.n	8000b56 <__swsetup_r+0x1e>
 8000b7e:	4b24      	ldr	r3, [pc, #144]	; (8000c10 <__swsetup_r+0xd8>)
 8000b80:	429c      	cmp	r4, r3
 8000b82:	bf08      	it	eq
 8000b84:	68ec      	ldreq	r4, [r5, #12]
 8000b86:	e7e6      	b.n	8000b56 <__swsetup_r+0x1e>
 8000b88:	0758      	lsls	r0, r3, #29
 8000b8a:	d512      	bpl.n	8000bb2 <__swsetup_r+0x7a>
 8000b8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b8e:	b141      	cbz	r1, 8000ba2 <__swsetup_r+0x6a>
 8000b90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b94:	4299      	cmp	r1, r3
 8000b96:	d002      	beq.n	8000b9e <__swsetup_r+0x66>
 8000b98:	4630      	mov	r0, r6
 8000b9a:	f000 fa59 	bl	8001050 <_free_r>
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	6363      	str	r3, [r4, #52]	; 0x34
 8000ba2:	89a3      	ldrh	r3, [r4, #12]
 8000ba4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000ba8:	81a3      	strh	r3, [r4, #12]
 8000baa:	2300      	movs	r3, #0
 8000bac:	6063      	str	r3, [r4, #4]
 8000bae:	6923      	ldr	r3, [r4, #16]
 8000bb0:	6023      	str	r3, [r4, #0]
 8000bb2:	89a3      	ldrh	r3, [r4, #12]
 8000bb4:	f043 0308 	orr.w	r3, r3, #8
 8000bb8:	81a3      	strh	r3, [r4, #12]
 8000bba:	6923      	ldr	r3, [r4, #16]
 8000bbc:	b94b      	cbnz	r3, 8000bd2 <__swsetup_r+0x9a>
 8000bbe:	89a3      	ldrh	r3, [r4, #12]
 8000bc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bc8:	d003      	beq.n	8000bd2 <__swsetup_r+0x9a>
 8000bca:	4621      	mov	r1, r4
 8000bcc:	4630      	mov	r0, r6
 8000bce:	f000 f9ff 	bl	8000fd0 <__smakebuf_r>
 8000bd2:	89a0      	ldrh	r0, [r4, #12]
 8000bd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000bd8:	f010 0301 	ands.w	r3, r0, #1
 8000bdc:	d00a      	beq.n	8000bf4 <__swsetup_r+0xbc>
 8000bde:	2300      	movs	r3, #0
 8000be0:	60a3      	str	r3, [r4, #8]
 8000be2:	6963      	ldr	r3, [r4, #20]
 8000be4:	425b      	negs	r3, r3
 8000be6:	61a3      	str	r3, [r4, #24]
 8000be8:	6923      	ldr	r3, [r4, #16]
 8000bea:	b943      	cbnz	r3, 8000bfe <__swsetup_r+0xc6>
 8000bec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000bf0:	d1ba      	bne.n	8000b68 <__swsetup_r+0x30>
 8000bf2:	bd70      	pop	{r4, r5, r6, pc}
 8000bf4:	0781      	lsls	r1, r0, #30
 8000bf6:	bf58      	it	pl
 8000bf8:	6963      	ldrpl	r3, [r4, #20]
 8000bfa:	60a3      	str	r3, [r4, #8]
 8000bfc:	e7f4      	b.n	8000be8 <__swsetup_r+0xb0>
 8000bfe:	2000      	movs	r0, #0
 8000c00:	e7f7      	b.n	8000bf2 <__swsetup_r+0xba>
 8000c02:	bf00      	nop
 8000c04:	20000004 	.word	0x20000004
 8000c08:	080013c0 	.word	0x080013c0
 8000c0c:	080013e0 	.word	0x080013e0
 8000c10:	080013a0 	.word	0x080013a0

08000c14 <__sflush_r>:
 8000c14:	898a      	ldrh	r2, [r1, #12]
 8000c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c1a:	4605      	mov	r5, r0
 8000c1c:	0710      	lsls	r0, r2, #28
 8000c1e:	460c      	mov	r4, r1
 8000c20:	d458      	bmi.n	8000cd4 <__sflush_r+0xc0>
 8000c22:	684b      	ldr	r3, [r1, #4]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	dc05      	bgt.n	8000c34 <__sflush_r+0x20>
 8000c28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	dc02      	bgt.n	8000c34 <__sflush_r+0x20>
 8000c2e:	2000      	movs	r0, #0
 8000c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d0f9      	beq.n	8000c2e <__sflush_r+0x1a>
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000c40:	682f      	ldr	r7, [r5, #0]
 8000c42:	602b      	str	r3, [r5, #0]
 8000c44:	d032      	beq.n	8000cac <__sflush_r+0x98>
 8000c46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000c48:	89a3      	ldrh	r3, [r4, #12]
 8000c4a:	075a      	lsls	r2, r3, #29
 8000c4c:	d505      	bpl.n	8000c5a <__sflush_r+0x46>
 8000c4e:	6863      	ldr	r3, [r4, #4]
 8000c50:	1ac0      	subs	r0, r0, r3
 8000c52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c54:	b10b      	cbz	r3, 8000c5a <__sflush_r+0x46>
 8000c56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c58:	1ac0      	subs	r0, r0, r3
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c60:	6a21      	ldr	r1, [r4, #32]
 8000c62:	4628      	mov	r0, r5
 8000c64:	47b0      	blx	r6
 8000c66:	1c43      	adds	r3, r0, #1
 8000c68:	89a3      	ldrh	r3, [r4, #12]
 8000c6a:	d106      	bne.n	8000c7a <__sflush_r+0x66>
 8000c6c:	6829      	ldr	r1, [r5, #0]
 8000c6e:	291d      	cmp	r1, #29
 8000c70:	d82c      	bhi.n	8000ccc <__sflush_r+0xb8>
 8000c72:	4a2a      	ldr	r2, [pc, #168]	; (8000d1c <__sflush_r+0x108>)
 8000c74:	40ca      	lsrs	r2, r1
 8000c76:	07d6      	lsls	r6, r2, #31
 8000c78:	d528      	bpl.n	8000ccc <__sflush_r+0xb8>
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	6062      	str	r2, [r4, #4]
 8000c7e:	04d9      	lsls	r1, r3, #19
 8000c80:	6922      	ldr	r2, [r4, #16]
 8000c82:	6022      	str	r2, [r4, #0]
 8000c84:	d504      	bpl.n	8000c90 <__sflush_r+0x7c>
 8000c86:	1c42      	adds	r2, r0, #1
 8000c88:	d101      	bne.n	8000c8e <__sflush_r+0x7a>
 8000c8a:	682b      	ldr	r3, [r5, #0]
 8000c8c:	b903      	cbnz	r3, 8000c90 <__sflush_r+0x7c>
 8000c8e:	6560      	str	r0, [r4, #84]	; 0x54
 8000c90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000c92:	602f      	str	r7, [r5, #0]
 8000c94:	2900      	cmp	r1, #0
 8000c96:	d0ca      	beq.n	8000c2e <__sflush_r+0x1a>
 8000c98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000c9c:	4299      	cmp	r1, r3
 8000c9e:	d002      	beq.n	8000ca6 <__sflush_r+0x92>
 8000ca0:	4628      	mov	r0, r5
 8000ca2:	f000 f9d5 	bl	8001050 <_free_r>
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	6360      	str	r0, [r4, #52]	; 0x34
 8000caa:	e7c1      	b.n	8000c30 <__sflush_r+0x1c>
 8000cac:	6a21      	ldr	r1, [r4, #32]
 8000cae:	2301      	movs	r3, #1
 8000cb0:	4628      	mov	r0, r5
 8000cb2:	47b0      	blx	r6
 8000cb4:	1c41      	adds	r1, r0, #1
 8000cb6:	d1c7      	bne.n	8000c48 <__sflush_r+0x34>
 8000cb8:	682b      	ldr	r3, [r5, #0]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d0c4      	beq.n	8000c48 <__sflush_r+0x34>
 8000cbe:	2b1d      	cmp	r3, #29
 8000cc0:	d001      	beq.n	8000cc6 <__sflush_r+0xb2>
 8000cc2:	2b16      	cmp	r3, #22
 8000cc4:	d101      	bne.n	8000cca <__sflush_r+0xb6>
 8000cc6:	602f      	str	r7, [r5, #0]
 8000cc8:	e7b1      	b.n	8000c2e <__sflush_r+0x1a>
 8000cca:	89a3      	ldrh	r3, [r4, #12]
 8000ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cd0:	81a3      	strh	r3, [r4, #12]
 8000cd2:	e7ad      	b.n	8000c30 <__sflush_r+0x1c>
 8000cd4:	690f      	ldr	r7, [r1, #16]
 8000cd6:	2f00      	cmp	r7, #0
 8000cd8:	d0a9      	beq.n	8000c2e <__sflush_r+0x1a>
 8000cda:	0793      	lsls	r3, r2, #30
 8000cdc:	680e      	ldr	r6, [r1, #0]
 8000cde:	bf08      	it	eq
 8000ce0:	694b      	ldreq	r3, [r1, #20]
 8000ce2:	600f      	str	r7, [r1, #0]
 8000ce4:	bf18      	it	ne
 8000ce6:	2300      	movne	r3, #0
 8000ce8:	eba6 0807 	sub.w	r8, r6, r7
 8000cec:	608b      	str	r3, [r1, #8]
 8000cee:	f1b8 0f00 	cmp.w	r8, #0
 8000cf2:	dd9c      	ble.n	8000c2e <__sflush_r+0x1a>
 8000cf4:	6a21      	ldr	r1, [r4, #32]
 8000cf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000cf8:	4643      	mov	r3, r8
 8000cfa:	463a      	mov	r2, r7
 8000cfc:	4628      	mov	r0, r5
 8000cfe:	47b0      	blx	r6
 8000d00:	2800      	cmp	r0, #0
 8000d02:	dc06      	bgt.n	8000d12 <__sflush_r+0xfe>
 8000d04:	89a3      	ldrh	r3, [r4, #12]
 8000d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d0a:	81a3      	strh	r3, [r4, #12]
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d10:	e78e      	b.n	8000c30 <__sflush_r+0x1c>
 8000d12:	4407      	add	r7, r0
 8000d14:	eba8 0800 	sub.w	r8, r8, r0
 8000d18:	e7e9      	b.n	8000cee <__sflush_r+0xda>
 8000d1a:	bf00      	nop
 8000d1c:	20400001 	.word	0x20400001

08000d20 <_fflush_r>:
 8000d20:	b538      	push	{r3, r4, r5, lr}
 8000d22:	690b      	ldr	r3, [r1, #16]
 8000d24:	4605      	mov	r5, r0
 8000d26:	460c      	mov	r4, r1
 8000d28:	b913      	cbnz	r3, 8000d30 <_fflush_r+0x10>
 8000d2a:	2500      	movs	r5, #0
 8000d2c:	4628      	mov	r0, r5
 8000d2e:	bd38      	pop	{r3, r4, r5, pc}
 8000d30:	b118      	cbz	r0, 8000d3a <_fflush_r+0x1a>
 8000d32:	6983      	ldr	r3, [r0, #24]
 8000d34:	b90b      	cbnz	r3, 8000d3a <_fflush_r+0x1a>
 8000d36:	f000 f887 	bl	8000e48 <__sinit>
 8000d3a:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <_fflush_r+0x6c>)
 8000d3c:	429c      	cmp	r4, r3
 8000d3e:	d11b      	bne.n	8000d78 <_fflush_r+0x58>
 8000d40:	686c      	ldr	r4, [r5, #4]
 8000d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d0ef      	beq.n	8000d2a <_fflush_r+0xa>
 8000d4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000d4c:	07d0      	lsls	r0, r2, #31
 8000d4e:	d404      	bmi.n	8000d5a <_fflush_r+0x3a>
 8000d50:	0599      	lsls	r1, r3, #22
 8000d52:	d402      	bmi.n	8000d5a <_fflush_r+0x3a>
 8000d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d56:	f000 f915 	bl	8000f84 <__retarget_lock_acquire_recursive>
 8000d5a:	4628      	mov	r0, r5
 8000d5c:	4621      	mov	r1, r4
 8000d5e:	f7ff ff59 	bl	8000c14 <__sflush_r>
 8000d62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000d64:	07da      	lsls	r2, r3, #31
 8000d66:	4605      	mov	r5, r0
 8000d68:	d4e0      	bmi.n	8000d2c <_fflush_r+0xc>
 8000d6a:	89a3      	ldrh	r3, [r4, #12]
 8000d6c:	059b      	lsls	r3, r3, #22
 8000d6e:	d4dd      	bmi.n	8000d2c <_fflush_r+0xc>
 8000d70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d72:	f000 f908 	bl	8000f86 <__retarget_lock_release_recursive>
 8000d76:	e7d9      	b.n	8000d2c <_fflush_r+0xc>
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <_fflush_r+0x70>)
 8000d7a:	429c      	cmp	r4, r3
 8000d7c:	d101      	bne.n	8000d82 <_fflush_r+0x62>
 8000d7e:	68ac      	ldr	r4, [r5, #8]
 8000d80:	e7df      	b.n	8000d42 <_fflush_r+0x22>
 8000d82:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <_fflush_r+0x74>)
 8000d84:	429c      	cmp	r4, r3
 8000d86:	bf08      	it	eq
 8000d88:	68ec      	ldreq	r4, [r5, #12]
 8000d8a:	e7da      	b.n	8000d42 <_fflush_r+0x22>
 8000d8c:	080013c0 	.word	0x080013c0
 8000d90:	080013e0 	.word	0x080013e0
 8000d94:	080013a0 	.word	0x080013a0

08000d98 <std>:
 8000d98:	2300      	movs	r3, #0
 8000d9a:	b510      	push	{r4, lr}
 8000d9c:	4604      	mov	r4, r0
 8000d9e:	e9c0 3300 	strd	r3, r3, [r0]
 8000da2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000da6:	6083      	str	r3, [r0, #8]
 8000da8:	8181      	strh	r1, [r0, #12]
 8000daa:	6643      	str	r3, [r0, #100]	; 0x64
 8000dac:	81c2      	strh	r2, [r0, #14]
 8000dae:	6183      	str	r3, [r0, #24]
 8000db0:	4619      	mov	r1, r3
 8000db2:	2208      	movs	r2, #8
 8000db4:	305c      	adds	r0, #92	; 0x5c
 8000db6:	f7ff fdef 	bl	8000998 <memset>
 8000dba:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <std+0x38>)
 8000dbc:	6263      	str	r3, [r4, #36]	; 0x24
 8000dbe:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <std+0x3c>)
 8000dc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <std+0x40>)
 8000dc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000dc6:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <std+0x44>)
 8000dc8:	6224      	str	r4, [r4, #32]
 8000dca:	6323      	str	r3, [r4, #48]	; 0x30
 8000dcc:	bd10      	pop	{r4, pc}
 8000dce:	bf00      	nop
 8000dd0:	080011c1 	.word	0x080011c1
 8000dd4:	080011e3 	.word	0x080011e3
 8000dd8:	0800121b 	.word	0x0800121b
 8000ddc:	0800123f 	.word	0x0800123f

08000de0 <_cleanup_r>:
 8000de0:	4901      	ldr	r1, [pc, #4]	; (8000de8 <_cleanup_r+0x8>)
 8000de2:	f000 b8af 	b.w	8000f44 <_fwalk_reent>
 8000de6:	bf00      	nop
 8000de8:	08000d21 	.word	0x08000d21

08000dec <__sfmoreglue>:
 8000dec:	b570      	push	{r4, r5, r6, lr}
 8000dee:	1e4a      	subs	r2, r1, #1
 8000df0:	2568      	movs	r5, #104	; 0x68
 8000df2:	4355      	muls	r5, r2
 8000df4:	460e      	mov	r6, r1
 8000df6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000dfa:	f000 f977 	bl	80010ec <_malloc_r>
 8000dfe:	4604      	mov	r4, r0
 8000e00:	b140      	cbz	r0, 8000e14 <__sfmoreglue+0x28>
 8000e02:	2100      	movs	r1, #0
 8000e04:	e9c0 1600 	strd	r1, r6, [r0]
 8000e08:	300c      	adds	r0, #12
 8000e0a:	60a0      	str	r0, [r4, #8]
 8000e0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000e10:	f7ff fdc2 	bl	8000998 <memset>
 8000e14:	4620      	mov	r0, r4
 8000e16:	bd70      	pop	{r4, r5, r6, pc}

08000e18 <__sfp_lock_acquire>:
 8000e18:	4801      	ldr	r0, [pc, #4]	; (8000e20 <__sfp_lock_acquire+0x8>)
 8000e1a:	f000 b8b3 	b.w	8000f84 <__retarget_lock_acquire_recursive>
 8000e1e:	bf00      	nop
 8000e20:	200000ec 	.word	0x200000ec

08000e24 <__sfp_lock_release>:
 8000e24:	4801      	ldr	r0, [pc, #4]	; (8000e2c <__sfp_lock_release+0x8>)
 8000e26:	f000 b8ae 	b.w	8000f86 <__retarget_lock_release_recursive>
 8000e2a:	bf00      	nop
 8000e2c:	200000ec 	.word	0x200000ec

08000e30 <__sinit_lock_acquire>:
 8000e30:	4801      	ldr	r0, [pc, #4]	; (8000e38 <__sinit_lock_acquire+0x8>)
 8000e32:	f000 b8a7 	b.w	8000f84 <__retarget_lock_acquire_recursive>
 8000e36:	bf00      	nop
 8000e38:	200000e7 	.word	0x200000e7

08000e3c <__sinit_lock_release>:
 8000e3c:	4801      	ldr	r0, [pc, #4]	; (8000e44 <__sinit_lock_release+0x8>)
 8000e3e:	f000 b8a2 	b.w	8000f86 <__retarget_lock_release_recursive>
 8000e42:	bf00      	nop
 8000e44:	200000e7 	.word	0x200000e7

08000e48 <__sinit>:
 8000e48:	b510      	push	{r4, lr}
 8000e4a:	4604      	mov	r4, r0
 8000e4c:	f7ff fff0 	bl	8000e30 <__sinit_lock_acquire>
 8000e50:	69a3      	ldr	r3, [r4, #24]
 8000e52:	b11b      	cbz	r3, 8000e5c <__sinit+0x14>
 8000e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e58:	f7ff bff0 	b.w	8000e3c <__sinit_lock_release>
 8000e5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000e60:	6523      	str	r3, [r4, #80]	; 0x50
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <__sinit+0x68>)
 8000e64:	4a13      	ldr	r2, [pc, #76]	; (8000eb4 <__sinit+0x6c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	62a2      	str	r2, [r4, #40]	; 0x28
 8000e6a:	42a3      	cmp	r3, r4
 8000e6c:	bf04      	itt	eq
 8000e6e:	2301      	moveq	r3, #1
 8000e70:	61a3      	streq	r3, [r4, #24]
 8000e72:	4620      	mov	r0, r4
 8000e74:	f000 f820 	bl	8000eb8 <__sfp>
 8000e78:	6060      	str	r0, [r4, #4]
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	f000 f81c 	bl	8000eb8 <__sfp>
 8000e80:	60a0      	str	r0, [r4, #8]
 8000e82:	4620      	mov	r0, r4
 8000e84:	f000 f818 	bl	8000eb8 <__sfp>
 8000e88:	2200      	movs	r2, #0
 8000e8a:	60e0      	str	r0, [r4, #12]
 8000e8c:	2104      	movs	r1, #4
 8000e8e:	6860      	ldr	r0, [r4, #4]
 8000e90:	f7ff ff82 	bl	8000d98 <std>
 8000e94:	68a0      	ldr	r0, [r4, #8]
 8000e96:	2201      	movs	r2, #1
 8000e98:	2109      	movs	r1, #9
 8000e9a:	f7ff ff7d 	bl	8000d98 <std>
 8000e9e:	68e0      	ldr	r0, [r4, #12]
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	2112      	movs	r1, #18
 8000ea4:	f7ff ff78 	bl	8000d98 <std>
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	61a3      	str	r3, [r4, #24]
 8000eac:	e7d2      	b.n	8000e54 <__sinit+0xc>
 8000eae:	bf00      	nop
 8000eb0:	0800139c 	.word	0x0800139c
 8000eb4:	08000de1 	.word	0x08000de1

08000eb8 <__sfp>:
 8000eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eba:	4607      	mov	r7, r0
 8000ebc:	f7ff ffac 	bl	8000e18 <__sfp_lock_acquire>
 8000ec0:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <__sfp+0x84>)
 8000ec2:	681e      	ldr	r6, [r3, #0]
 8000ec4:	69b3      	ldr	r3, [r6, #24]
 8000ec6:	b913      	cbnz	r3, 8000ece <__sfp+0x16>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	f7ff ffbd 	bl	8000e48 <__sinit>
 8000ece:	3648      	adds	r6, #72	; 0x48
 8000ed0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	d503      	bpl.n	8000ee0 <__sfp+0x28>
 8000ed8:	6833      	ldr	r3, [r6, #0]
 8000eda:	b30b      	cbz	r3, 8000f20 <__sfp+0x68>
 8000edc:	6836      	ldr	r6, [r6, #0]
 8000ede:	e7f7      	b.n	8000ed0 <__sfp+0x18>
 8000ee0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000ee4:	b9d5      	cbnz	r5, 8000f1c <__sfp+0x64>
 8000ee6:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <__sfp+0x88>)
 8000ee8:	60e3      	str	r3, [r4, #12]
 8000eea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000eee:	6665      	str	r5, [r4, #100]	; 0x64
 8000ef0:	f000 f847 	bl	8000f82 <__retarget_lock_init_recursive>
 8000ef4:	f7ff ff96 	bl	8000e24 <__sfp_lock_release>
 8000ef8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000efc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000f00:	6025      	str	r5, [r4, #0]
 8000f02:	61a5      	str	r5, [r4, #24]
 8000f04:	2208      	movs	r2, #8
 8000f06:	4629      	mov	r1, r5
 8000f08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000f0c:	f7ff fd44 	bl	8000998 <memset>
 8000f10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000f14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000f18:	4620      	mov	r0, r4
 8000f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f1c:	3468      	adds	r4, #104	; 0x68
 8000f1e:	e7d9      	b.n	8000ed4 <__sfp+0x1c>
 8000f20:	2104      	movs	r1, #4
 8000f22:	4638      	mov	r0, r7
 8000f24:	f7ff ff62 	bl	8000dec <__sfmoreglue>
 8000f28:	4604      	mov	r4, r0
 8000f2a:	6030      	str	r0, [r6, #0]
 8000f2c:	2800      	cmp	r0, #0
 8000f2e:	d1d5      	bne.n	8000edc <__sfp+0x24>
 8000f30:	f7ff ff78 	bl	8000e24 <__sfp_lock_release>
 8000f34:	230c      	movs	r3, #12
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	e7ee      	b.n	8000f18 <__sfp+0x60>
 8000f3a:	bf00      	nop
 8000f3c:	0800139c 	.word	0x0800139c
 8000f40:	ffff0001 	.word	0xffff0001

08000f44 <_fwalk_reent>:
 8000f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f48:	4606      	mov	r6, r0
 8000f4a:	4688      	mov	r8, r1
 8000f4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000f50:	2700      	movs	r7, #0
 8000f52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000f56:	f1b9 0901 	subs.w	r9, r9, #1
 8000f5a:	d505      	bpl.n	8000f68 <_fwalk_reent+0x24>
 8000f5c:	6824      	ldr	r4, [r4, #0]
 8000f5e:	2c00      	cmp	r4, #0
 8000f60:	d1f7      	bne.n	8000f52 <_fwalk_reent+0xe>
 8000f62:	4638      	mov	r0, r7
 8000f64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f68:	89ab      	ldrh	r3, [r5, #12]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d907      	bls.n	8000f7e <_fwalk_reent+0x3a>
 8000f6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000f72:	3301      	adds	r3, #1
 8000f74:	d003      	beq.n	8000f7e <_fwalk_reent+0x3a>
 8000f76:	4629      	mov	r1, r5
 8000f78:	4630      	mov	r0, r6
 8000f7a:	47c0      	blx	r8
 8000f7c:	4307      	orrs	r7, r0
 8000f7e:	3568      	adds	r5, #104	; 0x68
 8000f80:	e7e9      	b.n	8000f56 <_fwalk_reent+0x12>

08000f82 <__retarget_lock_init_recursive>:
 8000f82:	4770      	bx	lr

08000f84 <__retarget_lock_acquire_recursive>:
 8000f84:	4770      	bx	lr

08000f86 <__retarget_lock_release_recursive>:
 8000f86:	4770      	bx	lr

08000f88 <__swhatbuf_r>:
 8000f88:	b570      	push	{r4, r5, r6, lr}
 8000f8a:	460e      	mov	r6, r1
 8000f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f90:	2900      	cmp	r1, #0
 8000f92:	b096      	sub	sp, #88	; 0x58
 8000f94:	4614      	mov	r4, r2
 8000f96:	461d      	mov	r5, r3
 8000f98:	da07      	bge.n	8000faa <__swhatbuf_r+0x22>
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	602b      	str	r3, [r5, #0]
 8000f9e:	89b3      	ldrh	r3, [r6, #12]
 8000fa0:	061a      	lsls	r2, r3, #24
 8000fa2:	d410      	bmi.n	8000fc6 <__swhatbuf_r+0x3e>
 8000fa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fa8:	e00e      	b.n	8000fc8 <__swhatbuf_r+0x40>
 8000faa:	466a      	mov	r2, sp
 8000fac:	f000 f96e 	bl	800128c <_fstat_r>
 8000fb0:	2800      	cmp	r0, #0
 8000fb2:	dbf2      	blt.n	8000f9a <__swhatbuf_r+0x12>
 8000fb4:	9a01      	ldr	r2, [sp, #4]
 8000fb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000fba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000fbe:	425a      	negs	r2, r3
 8000fc0:	415a      	adcs	r2, r3
 8000fc2:	602a      	str	r2, [r5, #0]
 8000fc4:	e7ee      	b.n	8000fa4 <__swhatbuf_r+0x1c>
 8000fc6:	2340      	movs	r3, #64	; 0x40
 8000fc8:	2000      	movs	r0, #0
 8000fca:	6023      	str	r3, [r4, #0]
 8000fcc:	b016      	add	sp, #88	; 0x58
 8000fce:	bd70      	pop	{r4, r5, r6, pc}

08000fd0 <__smakebuf_r>:
 8000fd0:	898b      	ldrh	r3, [r1, #12]
 8000fd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000fd4:	079d      	lsls	r5, r3, #30
 8000fd6:	4606      	mov	r6, r0
 8000fd8:	460c      	mov	r4, r1
 8000fda:	d507      	bpl.n	8000fec <__smakebuf_r+0x1c>
 8000fdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000fe0:	6023      	str	r3, [r4, #0]
 8000fe2:	6123      	str	r3, [r4, #16]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	6163      	str	r3, [r4, #20]
 8000fe8:	b002      	add	sp, #8
 8000fea:	bd70      	pop	{r4, r5, r6, pc}
 8000fec:	ab01      	add	r3, sp, #4
 8000fee:	466a      	mov	r2, sp
 8000ff0:	f7ff ffca 	bl	8000f88 <__swhatbuf_r>
 8000ff4:	9900      	ldr	r1, [sp, #0]
 8000ff6:	4605      	mov	r5, r0
 8000ff8:	4630      	mov	r0, r6
 8000ffa:	f000 f877 	bl	80010ec <_malloc_r>
 8000ffe:	b948      	cbnz	r0, 8001014 <__smakebuf_r+0x44>
 8001000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001004:	059a      	lsls	r2, r3, #22
 8001006:	d4ef      	bmi.n	8000fe8 <__smakebuf_r+0x18>
 8001008:	f023 0303 	bic.w	r3, r3, #3
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	81a3      	strh	r3, [r4, #12]
 8001012:	e7e3      	b.n	8000fdc <__smakebuf_r+0xc>
 8001014:	4b0d      	ldr	r3, [pc, #52]	; (800104c <__smakebuf_r+0x7c>)
 8001016:	62b3      	str	r3, [r6, #40]	; 0x28
 8001018:	89a3      	ldrh	r3, [r4, #12]
 800101a:	6020      	str	r0, [r4, #0]
 800101c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001020:	81a3      	strh	r3, [r4, #12]
 8001022:	9b00      	ldr	r3, [sp, #0]
 8001024:	6163      	str	r3, [r4, #20]
 8001026:	9b01      	ldr	r3, [sp, #4]
 8001028:	6120      	str	r0, [r4, #16]
 800102a:	b15b      	cbz	r3, 8001044 <__smakebuf_r+0x74>
 800102c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001030:	4630      	mov	r0, r6
 8001032:	f000 f93d 	bl	80012b0 <_isatty_r>
 8001036:	b128      	cbz	r0, 8001044 <__smakebuf_r+0x74>
 8001038:	89a3      	ldrh	r3, [r4, #12]
 800103a:	f023 0303 	bic.w	r3, r3, #3
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	81a3      	strh	r3, [r4, #12]
 8001044:	89a0      	ldrh	r0, [r4, #12]
 8001046:	4305      	orrs	r5, r0
 8001048:	81a5      	strh	r5, [r4, #12]
 800104a:	e7cd      	b.n	8000fe8 <__smakebuf_r+0x18>
 800104c:	08000de1 	.word	0x08000de1

08001050 <_free_r>:
 8001050:	b538      	push	{r3, r4, r5, lr}
 8001052:	4605      	mov	r5, r0
 8001054:	2900      	cmp	r1, #0
 8001056:	d045      	beq.n	80010e4 <_free_r+0x94>
 8001058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800105c:	1f0c      	subs	r4, r1, #4
 800105e:	2b00      	cmp	r3, #0
 8001060:	bfb8      	it	lt
 8001062:	18e4      	addlt	r4, r4, r3
 8001064:	f000 f946 	bl	80012f4 <__malloc_lock>
 8001068:	4a1f      	ldr	r2, [pc, #124]	; (80010e8 <_free_r+0x98>)
 800106a:	6813      	ldr	r3, [r2, #0]
 800106c:	4610      	mov	r0, r2
 800106e:	b933      	cbnz	r3, 800107e <_free_r+0x2e>
 8001070:	6063      	str	r3, [r4, #4]
 8001072:	6014      	str	r4, [r2, #0]
 8001074:	4628      	mov	r0, r5
 8001076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800107a:	f000 b941 	b.w	8001300 <__malloc_unlock>
 800107e:	42a3      	cmp	r3, r4
 8001080:	d90b      	bls.n	800109a <_free_r+0x4a>
 8001082:	6821      	ldr	r1, [r4, #0]
 8001084:	1862      	adds	r2, r4, r1
 8001086:	4293      	cmp	r3, r2
 8001088:	bf04      	itt	eq
 800108a:	681a      	ldreq	r2, [r3, #0]
 800108c:	685b      	ldreq	r3, [r3, #4]
 800108e:	6063      	str	r3, [r4, #4]
 8001090:	bf04      	itt	eq
 8001092:	1852      	addeq	r2, r2, r1
 8001094:	6022      	streq	r2, [r4, #0]
 8001096:	6004      	str	r4, [r0, #0]
 8001098:	e7ec      	b.n	8001074 <_free_r+0x24>
 800109a:	461a      	mov	r2, r3
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	b10b      	cbz	r3, 80010a4 <_free_r+0x54>
 80010a0:	42a3      	cmp	r3, r4
 80010a2:	d9fa      	bls.n	800109a <_free_r+0x4a>
 80010a4:	6811      	ldr	r1, [r2, #0]
 80010a6:	1850      	adds	r0, r2, r1
 80010a8:	42a0      	cmp	r0, r4
 80010aa:	d10b      	bne.n	80010c4 <_free_r+0x74>
 80010ac:	6820      	ldr	r0, [r4, #0]
 80010ae:	4401      	add	r1, r0
 80010b0:	1850      	adds	r0, r2, r1
 80010b2:	4283      	cmp	r3, r0
 80010b4:	6011      	str	r1, [r2, #0]
 80010b6:	d1dd      	bne.n	8001074 <_free_r+0x24>
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	6053      	str	r3, [r2, #4]
 80010be:	4401      	add	r1, r0
 80010c0:	6011      	str	r1, [r2, #0]
 80010c2:	e7d7      	b.n	8001074 <_free_r+0x24>
 80010c4:	d902      	bls.n	80010cc <_free_r+0x7c>
 80010c6:	230c      	movs	r3, #12
 80010c8:	602b      	str	r3, [r5, #0]
 80010ca:	e7d3      	b.n	8001074 <_free_r+0x24>
 80010cc:	6820      	ldr	r0, [r4, #0]
 80010ce:	1821      	adds	r1, r4, r0
 80010d0:	428b      	cmp	r3, r1
 80010d2:	bf04      	itt	eq
 80010d4:	6819      	ldreq	r1, [r3, #0]
 80010d6:	685b      	ldreq	r3, [r3, #4]
 80010d8:	6063      	str	r3, [r4, #4]
 80010da:	bf04      	itt	eq
 80010dc:	1809      	addeq	r1, r1, r0
 80010de:	6021      	streq	r1, [r4, #0]
 80010e0:	6054      	str	r4, [r2, #4]
 80010e2:	e7c7      	b.n	8001074 <_free_r+0x24>
 80010e4:	bd38      	pop	{r3, r4, r5, pc}
 80010e6:	bf00      	nop
 80010e8:	2000008c 	.word	0x2000008c

080010ec <_malloc_r>:
 80010ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ee:	1ccd      	adds	r5, r1, #3
 80010f0:	f025 0503 	bic.w	r5, r5, #3
 80010f4:	3508      	adds	r5, #8
 80010f6:	2d0c      	cmp	r5, #12
 80010f8:	bf38      	it	cc
 80010fa:	250c      	movcc	r5, #12
 80010fc:	2d00      	cmp	r5, #0
 80010fe:	4606      	mov	r6, r0
 8001100:	db01      	blt.n	8001106 <_malloc_r+0x1a>
 8001102:	42a9      	cmp	r1, r5
 8001104:	d903      	bls.n	800110e <_malloc_r+0x22>
 8001106:	230c      	movs	r3, #12
 8001108:	6033      	str	r3, [r6, #0]
 800110a:	2000      	movs	r0, #0
 800110c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800110e:	f000 f8f1 	bl	80012f4 <__malloc_lock>
 8001112:	4921      	ldr	r1, [pc, #132]	; (8001198 <_malloc_r+0xac>)
 8001114:	680a      	ldr	r2, [r1, #0]
 8001116:	4614      	mov	r4, r2
 8001118:	b99c      	cbnz	r4, 8001142 <_malloc_r+0x56>
 800111a:	4f20      	ldr	r7, [pc, #128]	; (800119c <_malloc_r+0xb0>)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b923      	cbnz	r3, 800112a <_malloc_r+0x3e>
 8001120:	4621      	mov	r1, r4
 8001122:	4630      	mov	r0, r6
 8001124:	f000 f83c 	bl	80011a0 <_sbrk_r>
 8001128:	6038      	str	r0, [r7, #0]
 800112a:	4629      	mov	r1, r5
 800112c:	4630      	mov	r0, r6
 800112e:	f000 f837 	bl	80011a0 <_sbrk_r>
 8001132:	1c43      	adds	r3, r0, #1
 8001134:	d123      	bne.n	800117e <_malloc_r+0x92>
 8001136:	230c      	movs	r3, #12
 8001138:	6033      	str	r3, [r6, #0]
 800113a:	4630      	mov	r0, r6
 800113c:	f000 f8e0 	bl	8001300 <__malloc_unlock>
 8001140:	e7e3      	b.n	800110a <_malloc_r+0x1e>
 8001142:	6823      	ldr	r3, [r4, #0]
 8001144:	1b5b      	subs	r3, r3, r5
 8001146:	d417      	bmi.n	8001178 <_malloc_r+0x8c>
 8001148:	2b0b      	cmp	r3, #11
 800114a:	d903      	bls.n	8001154 <_malloc_r+0x68>
 800114c:	6023      	str	r3, [r4, #0]
 800114e:	441c      	add	r4, r3
 8001150:	6025      	str	r5, [r4, #0]
 8001152:	e004      	b.n	800115e <_malloc_r+0x72>
 8001154:	6863      	ldr	r3, [r4, #4]
 8001156:	42a2      	cmp	r2, r4
 8001158:	bf0c      	ite	eq
 800115a:	600b      	streq	r3, [r1, #0]
 800115c:	6053      	strne	r3, [r2, #4]
 800115e:	4630      	mov	r0, r6
 8001160:	f000 f8ce 	bl	8001300 <__malloc_unlock>
 8001164:	f104 000b 	add.w	r0, r4, #11
 8001168:	1d23      	adds	r3, r4, #4
 800116a:	f020 0007 	bic.w	r0, r0, #7
 800116e:	1ac2      	subs	r2, r0, r3
 8001170:	d0cc      	beq.n	800110c <_malloc_r+0x20>
 8001172:	1a1b      	subs	r3, r3, r0
 8001174:	50a3      	str	r3, [r4, r2]
 8001176:	e7c9      	b.n	800110c <_malloc_r+0x20>
 8001178:	4622      	mov	r2, r4
 800117a:	6864      	ldr	r4, [r4, #4]
 800117c:	e7cc      	b.n	8001118 <_malloc_r+0x2c>
 800117e:	1cc4      	adds	r4, r0, #3
 8001180:	f024 0403 	bic.w	r4, r4, #3
 8001184:	42a0      	cmp	r0, r4
 8001186:	d0e3      	beq.n	8001150 <_malloc_r+0x64>
 8001188:	1a21      	subs	r1, r4, r0
 800118a:	4630      	mov	r0, r6
 800118c:	f000 f808 	bl	80011a0 <_sbrk_r>
 8001190:	3001      	adds	r0, #1
 8001192:	d1dd      	bne.n	8001150 <_malloc_r+0x64>
 8001194:	e7cf      	b.n	8001136 <_malloc_r+0x4a>
 8001196:	bf00      	nop
 8001198:	2000008c 	.word	0x2000008c
 800119c:	20000090 	.word	0x20000090

080011a0 <_sbrk_r>:
 80011a0:	b538      	push	{r3, r4, r5, lr}
 80011a2:	4d06      	ldr	r5, [pc, #24]	; (80011bc <_sbrk_r+0x1c>)
 80011a4:	2300      	movs	r3, #0
 80011a6:	4604      	mov	r4, r0
 80011a8:	4608      	mov	r0, r1
 80011aa:	602b      	str	r3, [r5, #0]
 80011ac:	f7ff fb6a 	bl	8000884 <_sbrk>
 80011b0:	1c43      	adds	r3, r0, #1
 80011b2:	d102      	bne.n	80011ba <_sbrk_r+0x1a>
 80011b4:	682b      	ldr	r3, [r5, #0]
 80011b6:	b103      	cbz	r3, 80011ba <_sbrk_r+0x1a>
 80011b8:	6023      	str	r3, [r4, #0]
 80011ba:	bd38      	pop	{r3, r4, r5, pc}
 80011bc:	200000f0 	.word	0x200000f0

080011c0 <__sread>:
 80011c0:	b510      	push	{r4, lr}
 80011c2:	460c      	mov	r4, r1
 80011c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011c8:	f000 f8a0 	bl	800130c <_read_r>
 80011cc:	2800      	cmp	r0, #0
 80011ce:	bfab      	itete	ge
 80011d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80011d2:	89a3      	ldrhlt	r3, [r4, #12]
 80011d4:	181b      	addge	r3, r3, r0
 80011d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80011da:	bfac      	ite	ge
 80011dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80011de:	81a3      	strhlt	r3, [r4, #12]
 80011e0:	bd10      	pop	{r4, pc}

080011e2 <__swrite>:
 80011e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011e6:	461f      	mov	r7, r3
 80011e8:	898b      	ldrh	r3, [r1, #12]
 80011ea:	05db      	lsls	r3, r3, #23
 80011ec:	4605      	mov	r5, r0
 80011ee:	460c      	mov	r4, r1
 80011f0:	4616      	mov	r6, r2
 80011f2:	d505      	bpl.n	8001200 <__swrite+0x1e>
 80011f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011f8:	2302      	movs	r3, #2
 80011fa:	2200      	movs	r2, #0
 80011fc:	f000 f868 	bl	80012d0 <_lseek_r>
 8001200:	89a3      	ldrh	r3, [r4, #12]
 8001202:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001206:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800120a:	81a3      	strh	r3, [r4, #12]
 800120c:	4632      	mov	r2, r6
 800120e:	463b      	mov	r3, r7
 8001210:	4628      	mov	r0, r5
 8001212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001216:	f000 b817 	b.w	8001248 <_write_r>

0800121a <__sseek>:
 800121a:	b510      	push	{r4, lr}
 800121c:	460c      	mov	r4, r1
 800121e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001222:	f000 f855 	bl	80012d0 <_lseek_r>
 8001226:	1c43      	adds	r3, r0, #1
 8001228:	89a3      	ldrh	r3, [r4, #12]
 800122a:	bf15      	itete	ne
 800122c:	6560      	strne	r0, [r4, #84]	; 0x54
 800122e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001232:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001236:	81a3      	strheq	r3, [r4, #12]
 8001238:	bf18      	it	ne
 800123a:	81a3      	strhne	r3, [r4, #12]
 800123c:	bd10      	pop	{r4, pc}

0800123e <__sclose>:
 800123e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001242:	f000 b813 	b.w	800126c <_close_r>
	...

08001248 <_write_r>:
 8001248:	b538      	push	{r3, r4, r5, lr}
 800124a:	4d07      	ldr	r5, [pc, #28]	; (8001268 <_write_r+0x20>)
 800124c:	4604      	mov	r4, r0
 800124e:	4608      	mov	r0, r1
 8001250:	4611      	mov	r1, r2
 8001252:	2200      	movs	r2, #0
 8001254:	602a      	str	r2, [r5, #0]
 8001256:	461a      	mov	r2, r3
 8001258:	f7ff fac7 	bl	80007ea <_write>
 800125c:	1c43      	adds	r3, r0, #1
 800125e:	d102      	bne.n	8001266 <_write_r+0x1e>
 8001260:	682b      	ldr	r3, [r5, #0]
 8001262:	b103      	cbz	r3, 8001266 <_write_r+0x1e>
 8001264:	6023      	str	r3, [r4, #0]
 8001266:	bd38      	pop	{r3, r4, r5, pc}
 8001268:	200000f0 	.word	0x200000f0

0800126c <_close_r>:
 800126c:	b538      	push	{r3, r4, r5, lr}
 800126e:	4d06      	ldr	r5, [pc, #24]	; (8001288 <_close_r+0x1c>)
 8001270:	2300      	movs	r3, #0
 8001272:	4604      	mov	r4, r0
 8001274:	4608      	mov	r0, r1
 8001276:	602b      	str	r3, [r5, #0]
 8001278:	f7ff fad3 	bl	8000822 <_close>
 800127c:	1c43      	adds	r3, r0, #1
 800127e:	d102      	bne.n	8001286 <_close_r+0x1a>
 8001280:	682b      	ldr	r3, [r5, #0]
 8001282:	b103      	cbz	r3, 8001286 <_close_r+0x1a>
 8001284:	6023      	str	r3, [r4, #0]
 8001286:	bd38      	pop	{r3, r4, r5, pc}
 8001288:	200000f0 	.word	0x200000f0

0800128c <_fstat_r>:
 800128c:	b538      	push	{r3, r4, r5, lr}
 800128e:	4d07      	ldr	r5, [pc, #28]	; (80012ac <_fstat_r+0x20>)
 8001290:	2300      	movs	r3, #0
 8001292:	4604      	mov	r4, r0
 8001294:	4608      	mov	r0, r1
 8001296:	4611      	mov	r1, r2
 8001298:	602b      	str	r3, [r5, #0]
 800129a:	f7ff facd 	bl	8000838 <_fstat>
 800129e:	1c43      	adds	r3, r0, #1
 80012a0:	d102      	bne.n	80012a8 <_fstat_r+0x1c>
 80012a2:	682b      	ldr	r3, [r5, #0]
 80012a4:	b103      	cbz	r3, 80012a8 <_fstat_r+0x1c>
 80012a6:	6023      	str	r3, [r4, #0]
 80012a8:	bd38      	pop	{r3, r4, r5, pc}
 80012aa:	bf00      	nop
 80012ac:	200000f0 	.word	0x200000f0

080012b0 <_isatty_r>:
 80012b0:	b538      	push	{r3, r4, r5, lr}
 80012b2:	4d06      	ldr	r5, [pc, #24]	; (80012cc <_isatty_r+0x1c>)
 80012b4:	2300      	movs	r3, #0
 80012b6:	4604      	mov	r4, r0
 80012b8:	4608      	mov	r0, r1
 80012ba:	602b      	str	r3, [r5, #0]
 80012bc:	f7ff facb 	bl	8000856 <_isatty>
 80012c0:	1c43      	adds	r3, r0, #1
 80012c2:	d102      	bne.n	80012ca <_isatty_r+0x1a>
 80012c4:	682b      	ldr	r3, [r5, #0]
 80012c6:	b103      	cbz	r3, 80012ca <_isatty_r+0x1a>
 80012c8:	6023      	str	r3, [r4, #0]
 80012ca:	bd38      	pop	{r3, r4, r5, pc}
 80012cc:	200000f0 	.word	0x200000f0

080012d0 <_lseek_r>:
 80012d0:	b538      	push	{r3, r4, r5, lr}
 80012d2:	4d07      	ldr	r5, [pc, #28]	; (80012f0 <_lseek_r+0x20>)
 80012d4:	4604      	mov	r4, r0
 80012d6:	4608      	mov	r0, r1
 80012d8:	4611      	mov	r1, r2
 80012da:	2200      	movs	r2, #0
 80012dc:	602a      	str	r2, [r5, #0]
 80012de:	461a      	mov	r2, r3
 80012e0:	f7ff fac3 	bl	800086a <_lseek>
 80012e4:	1c43      	adds	r3, r0, #1
 80012e6:	d102      	bne.n	80012ee <_lseek_r+0x1e>
 80012e8:	682b      	ldr	r3, [r5, #0]
 80012ea:	b103      	cbz	r3, 80012ee <_lseek_r+0x1e>
 80012ec:	6023      	str	r3, [r4, #0]
 80012ee:	bd38      	pop	{r3, r4, r5, pc}
 80012f0:	200000f0 	.word	0x200000f0

080012f4 <__malloc_lock>:
 80012f4:	4801      	ldr	r0, [pc, #4]	; (80012fc <__malloc_lock+0x8>)
 80012f6:	f7ff be45 	b.w	8000f84 <__retarget_lock_acquire_recursive>
 80012fa:	bf00      	nop
 80012fc:	200000e8 	.word	0x200000e8

08001300 <__malloc_unlock>:
 8001300:	4801      	ldr	r0, [pc, #4]	; (8001308 <__malloc_unlock+0x8>)
 8001302:	f7ff be40 	b.w	8000f86 <__retarget_lock_release_recursive>
 8001306:	bf00      	nop
 8001308:	200000e8 	.word	0x200000e8

0800130c <_read_r>:
 800130c:	b538      	push	{r3, r4, r5, lr}
 800130e:	4d07      	ldr	r5, [pc, #28]	; (800132c <_read_r+0x20>)
 8001310:	4604      	mov	r4, r0
 8001312:	4608      	mov	r0, r1
 8001314:	4611      	mov	r1, r2
 8001316:	2200      	movs	r2, #0
 8001318:	602a      	str	r2, [r5, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	f7ff fa48 	bl	80007b0 <_read>
 8001320:	1c43      	adds	r3, r0, #1
 8001322:	d102      	bne.n	800132a <_read_r+0x1e>
 8001324:	682b      	ldr	r3, [r5, #0]
 8001326:	b103      	cbz	r3, 800132a <_read_r+0x1e>
 8001328:	6023      	str	r3, [r4, #0]
 800132a:	bd38      	pop	{r3, r4, r5, pc}
 800132c:	200000f0 	.word	0x200000f0

08001330 <_init>:
 8001330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001332:	bf00      	nop
 8001334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001336:	bc08      	pop	{r3}
 8001338:	469e      	mov	lr, r3
 800133a:	4770      	bx	lr

0800133c <_fini>:
 800133c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800133e:	bf00      	nop
 8001340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001342:	bc08      	pop	{r3}
 8001344:	469e      	mov	lr, r3
 8001346:	4770      	bx	lr
