
011TaskScheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000101c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080011c4  080011c4  000111c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800127c  0800127c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800127c  0800127c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800127c  0800127c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800127c  0800127c  0001127c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001280  08001280  00011280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08001284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          0000004c  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c0  200000c0  00020074  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002751  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000782  00000000  00000000  000227ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d8  00000000  00000000  00022f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000190  00000000  00000000  00023150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d3c  00000000  00000000  000232e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001ac8  00000000  00000000  0002601c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009cac  00000000  00000000  00027ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00031790  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c98  00000000  00000000  000317e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000074 	.word	0x20000074
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080011ac 	.word	0x080011ac

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000078 	.word	0x20000078
 80001e4:	080011ac 	.word	0x080011ac

080001e8 <delay>:
#include <stdint.h>
#include "led.h"

void delay(uint32_t count)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
  for(uint32_t i = 0 ; i < count ; i++);
 80001f0:	2300      	movs	r3, #0
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	e002      	b.n	80001fc <delay+0x14>
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	3301      	adds	r3, #1
 80001fa:	60fb      	str	r3, [r7, #12]
 80001fc:	68fa      	ldr	r2, [r7, #12]
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	429a      	cmp	r2, r3
 8000202:	d3f8      	bcc.n	80001f6 <delay+0xe>
}
 8000204:	bf00      	nop
 8000206:	bf00      	nop
 8000208:	3714      	adds	r7, #20
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr

08000210 <led_init>:

void led_init(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0

	uint32_t *pAhb1En = RCC_AHB1ENR;
 8000216:	4b19      	ldr	r3, [pc, #100]	; (800027c <led_init+0x6c>)
 8000218:	607b      	str	r3, [r7, #4]
	uint32_t *pGpioDMode = GPIOD_MODER;
 800021a:	4b19      	ldr	r3, [pc, #100]	; (8000280 <led_init+0x70>)
 800021c:	603b      	str	r3, [r7, #0]

	*pAhb1En |= ( 1 << 3);
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f043 0208 	orr.w	r2, r3, #8
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	601a      	str	r2, [r3, #0]

	// Configure LEDs
	*pGpioDMode |= ( 1 << (2 * LED_GREEN));
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	601a      	str	r2, [r3, #0]
	*pGpioDMode |= ( 1 << (2 * LED_ORANGE));
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	601a      	str	r2, [r3, #0]
	*pGpioDMode |= ( 1 << (2 * LED_RED));
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	601a      	str	r2, [r3, #0]
	*pGpioDMode |= ( 1 << (2 * LED_BLUE));
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	601a      	str	r2, [r3, #0]

    led_off(LED_GREEN);
 800025a:	200c      	movs	r0, #12
 800025c:	f000 f82a 	bl	80002b4 <led_off>
    led_off(LED_ORANGE);
 8000260:	200d      	movs	r0, #13
 8000262:	f000 f827 	bl	80002b4 <led_off>
    led_off(LED_RED);
 8000266:	200e      	movs	r0, #14
 8000268:	f000 f824 	bl	80002b4 <led_off>
    led_off(LED_BLUE);
 800026c:	200f      	movs	r0, #15
 800026e:	f000 f821 	bl	80002b4 <led_off>
}
 8000272:	bf00      	nop
 8000274:	3708      	adds	r7, #8
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	40023830 	.word	0x40023830
 8000280:	40020c00 	.word	0x40020c00

08000284 <led_on>:

void led_on(uint8_t led_no)
{
 8000284:	b480      	push	{r7}
 8000286:	b085      	sub	sp, #20
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
	uint32_t *pGpioDData = GPIOD_ODR;
 800028e:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <led_on+0x2c>)
 8000290:	60fb      	str	r3, [r7, #12]
	*pGpioDData |= ( 1 << led_no);
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	79fa      	ldrb	r2, [r7, #7]
 8000298:	2101      	movs	r1, #1
 800029a:	fa01 f202 	lsl.w	r2, r1, r2
 800029e:	431a      	orrs	r2, r3
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	601a      	str	r2, [r3, #0]
}
 80002a4:	bf00      	nop
 80002a6:	3714      	adds	r7, #20
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bc80      	pop	{r7}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	40020c14 	.word	0x40020c14

080002b4 <led_off>:

void led_off(uint8_t led_no)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
	uint32_t *pGpioDData = GPIOD_ODR;
 80002be:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <led_off+0x2c>)
 80002c0:	60fb      	str	r3, [r7, #12]
	*pGpioDData &= ~( 1 << led_no);
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	79fa      	ldrb	r2, [r7, #7]
 80002c8:	2101      	movs	r1, #1
 80002ca:	fa01 f202 	lsl.w	r2, r1, r2
 80002ce:	43d2      	mvns	r2, r2
 80002d0:	401a      	ands	r2, r3
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	601a      	str	r2, [r3, #0]
}
 80002d6:	bf00      	nop
 80002d8:	3714      	adds	r7, #20
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr
 80002e0:	40020c14 	.word	0x40020c14

080002e4 <main>:
uint32_t handler_task[MAX_TASKS]; // TODO: Replace with struct

uint8_t current_task = 0; // Begin with task0

int main(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	enable_processor_faults();
 80002e8:	f000 f828 	bl	800033c <enable_processor_faults>

	init_sched_stack(SCHED_STACK_START);
 80002ec:	480d      	ldr	r0, [pc, #52]	; (8000324 <main+0x40>)
 80002ee:	f000 f882 	bl	80003f6 <init_sched_stack>

	handler_task[0] = (uint32_t)task0_handler; // Green LED  - PD12
 80002f2:	4a0d      	ldr	r2, [pc, #52]	; (8000328 <main+0x44>)
 80002f4:	4b0d      	ldr	r3, [pc, #52]	; (800032c <main+0x48>)
 80002f6:	601a      	str	r2, [r3, #0]
	handler_task[1] = (uint32_t)task1_handler; // Orange LED - PD13
 80002f8:	4a0d      	ldr	r2, [pc, #52]	; (8000330 <main+0x4c>)
 80002fa:	4b0c      	ldr	r3, [pc, #48]	; (800032c <main+0x48>)
 80002fc:	605a      	str	r2, [r3, #4]
	handler_task[2] = (uint32_t)task2_handler; // Red LED    - PD14
 80002fe:	4a0d      	ldr	r2, [pc, #52]	; (8000334 <main+0x50>)
 8000300:	4b0a      	ldr	r3, [pc, #40]	; (800032c <main+0x48>)
 8000302:	609a      	str	r2, [r3, #8]
	handler_task[3] = (uint32_t)task3_handler; // Blue LED   - PD12
 8000304:	4a0c      	ldr	r2, [pc, #48]	; (8000338 <main+0x54>)
 8000306:	4b09      	ldr	r3, [pc, #36]	; (800032c <main+0x48>)
 8000308:	60da      	str	r2, [r3, #12]
	init_tasks_stack();
 800030a:	f000 f879 	bl	8000400 <init_tasks_stack>

	led_init();
 800030e:	f7ff ff7f 	bl	8000210 <led_init>

	init_systick(TICK_HZ);
 8000312:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000316:	f000 f823 	bl	8000360 <init_systick>

	switch_to_psp(); // Going to process threads
 800031a:	f000 f8f1 	bl	8000500 <switch_to_psp>
	task0_handler(); // Manually start first task (Could use SVC to do this)
 800031e:	f000 f8ff 	bl	8000520 <task0_handler>

	/* Loop forever */
	for(;;); // Unreachable because tasks never return
 8000322:	e7fe      	b.n	8000322 <main+0x3e>
 8000324:	2001f000 	.word	0x2001f000
 8000328:	08000521 	.word	0x08000521
 800032c:	200000a0 	.word	0x200000a0
 8000330:	08000545 	.word	0x08000545
 8000334:	08000569 	.word	0x08000569
 8000338:	0800058d 	.word	0x0800058d

0800033c <enable_processor_faults>:
}

void enable_processor_faults(void)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
	// System Handler Control and State Register
	uint32_t *pSHCSR = SHCSR;
 8000342:	4b06      	ldr	r3, [pc, #24]	; (800035c <enable_processor_faults+0x20>)
 8000344:	607b      	str	r3, [r7, #4]

	// Enable configurable Exceptions
	// Set bits: [18] USGFAULTENA, [17] BUSFAULTENA, [16] MEMFAULTENA
	*pSHCSR |= (0x7 << 16); // 0b0111 << 16
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f443 22e0 	orr.w	r2, r3, #458752	; 0x70000
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	601a      	str	r2, [r3, #0]
}
 8000352:	bf00      	nop
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr
 800035c:	e000ed24 	.word	0xe000ed24

08000360 <init_systick>:

void init_systick(uint32_t tick_hz)
{
 8000360:	b480      	push	{r7}
 8000362:	b087      	sub	sp, #28
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = SYST_RVR;
 8000368:	4b16      	ldr	r3, [pc, #88]	; (80003c4 <init_systick+0x64>)
 800036a:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = SYST_CSR;
 800036c:	4b16      	ldr	r3, [pc, #88]	; (80003c8 <init_systick+0x68>)
 800036e:	613b      	str	r3, [r7, #16]
	uint32_t count_value = (SYSTICK_CLK/tick_hz)-1;
 8000370:	4a16      	ldr	r2, [pc, #88]	; (80003cc <init_systick+0x6c>)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	fbb2 f3f3 	udiv	r3, r2, r3
 8000378:	3b01      	subs	r3, #1
 800037a:	60fb      	str	r3, [r7, #12]

	// Clear RVR and load count
	*pSRVR &= ~(0x00FFFFFF);
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000384:	697b      	ldr	r3, [r7, #20]
 8000386:	601a      	str	r2, [r3, #0]
	*pSRVR |= count_value;
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	681a      	ldr	r2, [r3, #0]
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	431a      	orrs	r2, r3
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	601a      	str	r2, [r3, #0]

	// Configure SysTick
	*pSCSR |= (1 << 1); // Enable exception request
 8000394:	693b      	ldr	r3, [r7, #16]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f043 0202 	orr.w	r2, r3, #2
 800039c:	693b      	ldr	r3, [r7, #16]
 800039e:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2); // Use processor clock
 80003a0:	693b      	ldr	r3, [r7, #16]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f043 0204 	orr.w	r2, r3, #4
 80003a8:	693b      	ldr	r3, [r7, #16]
 80003aa:	601a      	str	r2, [r3, #0]

	// Enable SysTick
	*pSCSR |= (1 << 0);
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f043 0201 	orr.w	r2, r3, #1
 80003b4:	693b      	ldr	r3, [r7, #16]
 80003b6:	601a      	str	r2, [r3, #0]

}
 80003b8:	bf00      	nop
 80003ba:	371c      	adds	r7, #28
 80003bc:	46bd      	mov	sp, r7
 80003be:	bc80      	pop	{r7}
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	e000e014 	.word	0xe000e014
 80003c8:	e000e010 	.word	0xe000e010
 80003cc:	00f42400 	.word	0x00f42400

080003d0 <SysTick_Handler>:

__attribute__ ((naked)) void SysTick_Handler(void)
{
	__asm volatile ("PUSH {LR}");		// Preserve LR
 80003d0:	b500      	push	{lr}

	// Save context of current task SF1 + SF2 + PSP
	// Stack frame 1 is automatically stored on exception entry

	// 1. Get current PSP
	__asm volatile ("MRS R0, PSP");
 80003d2:	f3ef 8009 	mrs	r0, PSP

	// 2. Store SF2 (R4 - R11)
	__asm volatile ("STMDB R0!,{R4-R11}");	// Push registers to task's stack, R0 is updated with PSP
 80003d6:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// 3. Save PSP
//	__asm volatile ("MOV %0,R0": "=r"(psp_of_task[current_task]) ::);
	__asm volatile ("BL save_psp");			// Save task's PSP from R0
 80003da:	f000 f867 	bl	80004ac <save_psp>

	// Retrieve context of next task

	__asm volatile ("BL select_next_task");	// Advance round-robin
 80003de:	f000 f879 	bl	80004d4 <select_next_task>

	// 1. Retrieve previous PSP
	__asm volatile ("BL get_psp");			// Save task's PSP to R0
 80003e2:	f000 f853 	bl	800048c <get_psp>

	// 2. Retrieve SF2 (R4 - R11)
	__asm volatile ("LDMIA R0!,{R4-R11}");	// Pop registers to task's stack, R0 is updated with PSP
 80003e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// 3. Update PSP
	__asm volatile ("MSR PSP, R0");
 80003ea:	f380 8809 	msr	PSP, r0

	// SF1 is automatically fetched by exception exit

	__asm volatile ("POP {LR}");			// Restore LR
 80003ee:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile ("BX LR");				// Return from naked function
 80003f2:	4770      	bx	lr

}
 80003f4:	bf00      	nop

080003f6 <init_sched_stack>:

__attribute__ ((naked)) void init_sched_stack(uint32_t sched_stack_top)
{
 80003f6:	4603      	mov	r3, r0
	__asm("MSR MSP, %0"::"r" (sched_stack_top));
 80003f8:	f383 8808 	msr	MSP, r3
	__asm("BX LR");
 80003fc:	4770      	bx	lr
}
 80003fe:	bf00      	nop

08000400 <init_tasks_stack>:

void init_tasks_stack(void)
{
 8000400:	b480      	push	{r7}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
	uint32_t *pPSP;

	for(int i = 0; i < MAX_TASKS; i++)
 8000406:	2300      	movs	r3, #0
 8000408:	60bb      	str	r3, [r7, #8]
 800040a:	e032      	b.n	8000472 <init_tasks_stack+0x72>
	{
		pPSP = (uint32_t*)psp_of_task[i];
 800040c:	4a1d      	ldr	r2, [pc, #116]	; (8000484 <init_tasks_stack+0x84>)
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000414:	60fb      	str	r3, [r7, #12]

		pPSP--; // Decrement first (Stack: full descending)
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	3b04      	subs	r3, #4
 800041a:	60fb      	str	r3, [r7, #12]
		*pPSP = INIT_XPSR;
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000422:	601a      	str	r2, [r3, #0]

		pPSP--;
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	3b04      	subs	r3, #4
 8000428:	60fb      	str	r3, [r7, #12]
		*pPSP = handler_task[i]; // PC
 800042a:	4a17      	ldr	r2, [pc, #92]	; (8000488 <init_tasks_stack+0x88>)
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	601a      	str	r2, [r3, #0]

		pPSP--;
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	3b04      	subs	r3, #4
 800043a:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD; // LR: return to thread with PSP
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	f06f 0202 	mvn.w	r2, #2
 8000442:	601a      	str	r2, [r3, #0]

		for(int j = 0; j < 13; j++)
 8000444:	2300      	movs	r3, #0
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	e008      	b.n	800045c <init_tasks_stack+0x5c>
		{
			pPSP--;
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	3b04      	subs	r3, #4
 800044e:	60fb      	str	r3, [r7, #12]
			*pPSP = 0x00000000; // R0 - R12
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < 13; j++)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	3301      	adds	r3, #1
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	2b0c      	cmp	r3, #12
 8000460:	ddf3      	ble.n	800044a <init_tasks_stack+0x4a>
		}

		psp_of_task[i] = (uint32_t)pPSP;
 8000462:	68fa      	ldr	r2, [r7, #12]
 8000464:	4907      	ldr	r1, [pc, #28]	; (8000484 <init_tasks_stack+0x84>)
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < MAX_TASKS; i++)
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	3301      	adds	r3, #1
 8000470:	60bb      	str	r3, [r7, #8]
 8000472:	68bb      	ldr	r3, [r7, #8]
 8000474:	2b03      	cmp	r3, #3
 8000476:	ddc9      	ble.n	800040c <init_tasks_stack+0xc>
	}
}
 8000478:	bf00      	nop
 800047a:	bf00      	nop
 800047c:	3714      	adds	r7, #20
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr
 8000484:	20000000 	.word	0x20000000
 8000488:	200000a0 	.word	0x200000a0

0800048c <get_psp>:

uint32_t get_psp(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
	return psp_of_task[current_task]; // Returned via R0 per AAPCS
 8000490:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <get_psp+0x18>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	461a      	mov	r2, r3
 8000496:	4b04      	ldr	r3, [pc, #16]	; (80004a8 <get_psp+0x1c>)
 8000498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 800049c:	4618      	mov	r0, r3
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	20000090 	.word	0x20000090
 80004a8:	20000000 	.word	0x20000000

080004ac <save_psp>:

void save_psp(uint32_t current_psp)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
	psp_of_task[current_task] = current_psp;
 80004b4:	4b05      	ldr	r3, [pc, #20]	; (80004cc <save_psp+0x20>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	4619      	mov	r1, r3
 80004ba:	4a05      	ldr	r2, [pc, #20]	; (80004d0 <save_psp+0x24>)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr
 80004cc:	20000090 	.word	0x20000090
 80004d0:	20000000 	.word	0x20000000

080004d4 <select_next_task>:

void select_next_task(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
	current_task++;
 80004d8:	4b08      	ldr	r3, [pc, #32]	; (80004fc <select_next_task+0x28>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	3301      	adds	r3, #1
 80004de:	b2da      	uxtb	r2, r3
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <select_next_task+0x28>)
 80004e2:	701a      	strb	r2, [r3, #0]
	current_task %= MAX_TASKS; // MAX -> 0
 80004e4:	4b05      	ldr	r3, [pc, #20]	; (80004fc <select_next_task+0x28>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	f003 0303 	and.w	r3, r3, #3
 80004ec:	b2da      	uxtb	r2, r3
 80004ee:	4b03      	ldr	r3, [pc, #12]	; (80004fc <select_next_task+0x28>)
 80004f0:	701a      	strb	r2, [r3, #0]
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bc80      	pop	{r7}
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	20000090 	.word	0x20000090

08000500 <switch_to_psp>:

__attribute__ ((naked)) void switch_to_psp(void)
{
	__asm volatile ("PUSH {LR}");		// Preserve LR
 8000500:	b500      	push	{lr}

	// Initialize PSP with task's stack top
	__asm volatile ("BL get_psp");		// Get current task's PSP
 8000502:	f7ff ffc3 	bl	800048c <get_psp>
	__asm volatile ("MSR PSP, R0");		// Init PSP (R0 holds return value of get_psp)
 8000506:	f380 8809 	msr	PSP, r0

	__asm volatile ("POP {LR}");		// Restore LR
 800050a:	f85d eb04 	ldr.w	lr, [sp], #4

	// Switch SP to PSP
	__asm volatile ("MRS R0, CONTROL");
 800050e:	f3ef 8014 	mrs	r0, CONTROL
	__asm volatile ("ORR R0, #0x2");	// SPSEL = 1 (PSP)
 8000512:	f040 0002 	orr.w	r0, r0, #2
	__asm volatile ("MSR CONTROL, R0");
 8000516:	f380 8814 	msr	CONTROL, r0

	__asm volatile ("BX LR");			// Return from naked function
 800051a:	4770      	bx	lr

}
 800051c:	bf00      	nop
	...

08000520 <task0_handler>:

void task0_handler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_GREEN);
 8000524:	200c      	movs	r0, #12
 8000526:	f7ff fead 	bl	8000284 <led_on>
		delay(DELAY_COUNT_1S);
 800052a:	4805      	ldr	r0, [pc, #20]	; (8000540 <task0_handler+0x20>)
 800052c:	f7ff fe5c 	bl	80001e8 <delay>
		led_off(LED_GREEN);
 8000530:	200c      	movs	r0, #12
 8000532:	f7ff febf 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_1S);
 8000536:	4802      	ldr	r0, [pc, #8]	; (8000540 <task0_handler+0x20>)
 8000538:	f7ff fe56 	bl	80001e8 <delay>
		led_on(LED_GREEN);
 800053c:	e7f2      	b.n	8000524 <task0_handler+0x4>
 800053e:	bf00      	nop
 8000540:	001312d0 	.word	0x001312d0

08000544 <task1_handler>:
	}
}

void task1_handler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_ORANGE);
 8000548:	200d      	movs	r0, #13
 800054a:	f7ff fe9b 	bl	8000284 <led_on>
		delay(DELAY_COUNT_500MS);
 800054e:	4805      	ldr	r0, [pc, #20]	; (8000564 <task1_handler+0x20>)
 8000550:	f7ff fe4a 	bl	80001e8 <delay>
		led_off(LED_ORANGE);
 8000554:	200d      	movs	r0, #13
 8000556:	f7ff fead 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_500MS);
 800055a:	4802      	ldr	r0, [pc, #8]	; (8000564 <task1_handler+0x20>)
 800055c:	f7ff fe44 	bl	80001e8 <delay>
		led_on(LED_ORANGE);
 8000560:	e7f2      	b.n	8000548 <task1_handler+0x4>
 8000562:	bf00      	nop
 8000564:	00098968 	.word	0x00098968

08000568 <task2_handler>:
	}
}

void task2_handler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_RED);
 800056c:	200e      	movs	r0, #14
 800056e:	f7ff fe89 	bl	8000284 <led_on>
		delay(DELAY_COUNT_250MS);
 8000572:	4805      	ldr	r0, [pc, #20]	; (8000588 <task2_handler+0x20>)
 8000574:	f7ff fe38 	bl	80001e8 <delay>
		led_off(LED_RED);
 8000578:	200e      	movs	r0, #14
 800057a:	f7ff fe9b 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_250MS);
 800057e:	4802      	ldr	r0, [pc, #8]	; (8000588 <task2_handler+0x20>)
 8000580:	f7ff fe32 	bl	80001e8 <delay>
		led_on(LED_RED);
 8000584:	e7f2      	b.n	800056c <task2_handler+0x4>
 8000586:	bf00      	nop
 8000588:	0004c4b4 	.word	0x0004c4b4

0800058c <task3_handler>:
	}
}

void task3_handler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_BLUE);
 8000590:	200f      	movs	r0, #15
 8000592:	f7ff fe77 	bl	8000284 <led_on>
		delay(DELAY_COUNT_125MS);
 8000596:	4805      	ldr	r0, [pc, #20]	; (80005ac <task3_handler+0x20>)
 8000598:	f7ff fe26 	bl	80001e8 <delay>
		led_off(LED_BLUE);
 800059c:	200f      	movs	r0, #15
 800059e:	f7ff fe89 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_125MS);
 80005a2:	4802      	ldr	r0, [pc, #8]	; (80005ac <task3_handler+0x20>)
 80005a4:	f7ff fe20 	bl	80001e8 <delay>
		led_on(LED_BLUE);
 80005a8:	e7f2      	b.n	8000590 <task3_handler+0x4>
 80005aa:	bf00      	nop
 80005ac:	0002625a 	.word	0x0002625a

080005b0 <HardFault_Handler>:
	}
}

void HardFault_Handler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	printf("HardFault Exception\n");
 80005b4:	4801      	ldr	r0, [pc, #4]	; (80005bc <HardFault_Handler+0xc>)
 80005b6:	f000 f9a3 	bl	8000900 <puts>
	while(1);
 80005ba:	e7fe      	b.n	80005ba <HardFault_Handler+0xa>
 80005bc:	080011c4 	.word	0x080011c4

080005c0 <BusFault_Handler>:
	printf("UsageFault Exception\n");
	while(1);
}

void BusFault_Handler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	printf("BusFault Exception\n");
 80005c4:	4801      	ldr	r0, [pc, #4]	; (80005cc <BusFault_Handler+0xc>)
 80005c6:	f000 f99b 	bl	8000900 <puts>
	while(1);
 80005ca:	e7fe      	b.n	80005ca <BusFault_Handler+0xa>
 80005cc:	080011f0 	.word	0x080011f0

080005d0 <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	printf("MemFault Exception\n");
 80005d4:	4801      	ldr	r0, [pc, #4]	; (80005dc <MemManage_Handler+0xc>)
 80005d6:	f000 f993 	bl	8000900 <puts>
	while(1);
 80005da:	e7fe      	b.n	80005da <MemManage_Handler+0xa>
 80005dc:	08001204 	.word	0x08001204

080005e0 <ITM_SendChar>:
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

// This function writes to the ITM FIFO > stimulus port 0
void ITM_SendChar(uint8_t ch)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <ITM_SendChar+0x44>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a0d      	ldr	r2, [pc, #52]	; (8000624 <ITM_SendChar+0x44>)
 80005f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005f4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <ITM_SendChar+0x48>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <ITM_SendChar+0x48>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000602:	bf00      	nop
 8000604:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0f8      	beq.n	8000604 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000612:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	6013      	str	r3, [r2, #0]
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr
 8000624:	e000edfc 	.word	0xe000edfc
 8000628:	e0000e00 	.word	0xe0000e00

0800062c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
 800063c:	e00a      	b.n	8000654 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800063e:	f3af 8000 	nop.w
 8000642:	4601      	mov	r1, r0
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	1c5a      	adds	r2, r3, #1
 8000648:	60ba      	str	r2, [r7, #8]
 800064a:	b2ca      	uxtb	r2, r1
 800064c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	3301      	adds	r3, #1
 8000652:	617b      	str	r3, [r7, #20]
 8000654:	697a      	ldr	r2, [r7, #20]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	429a      	cmp	r2, r3
 800065a:	dbf0      	blt.n	800063e <_read+0x12>
	}

return len;
 800065c:	687b      	ldr	r3, [r7, #4]
}
 800065e:	4618      	mov	r0, r3
 8000660:	3718      	adds	r7, #24
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b086      	sub	sp, #24
 800066a:	af00      	add	r7, sp, #0
 800066c:	60f8      	str	r0, [r7, #12]
 800066e:	60b9      	str	r1, [r7, #8]
 8000670:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
 8000676:	e009      	b.n	800068c <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	1c5a      	adds	r2, r3, #1
 800067c:	60ba      	str	r2, [r7, #8]
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ffad 	bl	80005e0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	3301      	adds	r3, #1
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	697a      	ldr	r2, [r7, #20]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	429a      	cmp	r2, r3
 8000692:	dbf1      	blt.n	8000678 <_write+0x12>
	}
	return len;
 8000694:	687b      	ldr	r3, [r7, #4]
}
 8000696:	4618      	mov	r0, r3
 8000698:	3718      	adds	r7, #24
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <_close>:

int _close(int file)
{
 800069e:	b480      	push	{r7}
 80006a0:	b083      	sub	sp, #12
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
	return -1;
 80006a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr

080006b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006c4:	605a      	str	r2, [r3, #4]
	return 0;
 80006c6:	2300      	movs	r3, #0
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr

080006d2 <_isatty>:

int _isatty(int file)
{
 80006d2:	b480      	push	{r7}
 80006d4:	b083      	sub	sp, #12
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
	return 1;
 80006da:	2301      	movs	r3, #1
}
 80006dc:	4618      	mov	r0, r3
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr

080006e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006e6:	b480      	push	{r7}
 80006e8:	b085      	sub	sp, #20
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	60f8      	str	r0, [r7, #12]
 80006ee:	60b9      	str	r1, [r7, #8]
 80006f0:	607a      	str	r2, [r7, #4]
	return 0;
 80006f2:	2300      	movs	r3, #0
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr
	...

08000700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000708:	4a14      	ldr	r2, [pc, #80]	; (800075c <_sbrk+0x5c>)
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <_sbrk+0x60>)
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <_sbrk+0x64>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d102      	bne.n	8000722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <_sbrk+0x64>)
 800071e:	4a12      	ldr	r2, [pc, #72]	; (8000768 <_sbrk+0x68>)
 8000720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <_sbrk+0x64>)
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4413      	add	r3, r2
 800072a:	693a      	ldr	r2, [r7, #16]
 800072c:	429a      	cmp	r2, r3
 800072e:	d207      	bcs.n	8000740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000730:	f000 f846 	bl	80007c0 <__errno>
 8000734:	4603      	mov	r3, r0
 8000736:	220c      	movs	r2, #12
 8000738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800073a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800073e:	e009      	b.n	8000754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <_sbrk+0x64>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000746:	4b07      	ldr	r3, [pc, #28]	; (8000764 <_sbrk+0x64>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4413      	add	r3, r2
 800074e:	4a05      	ldr	r2, [pc, #20]	; (8000764 <_sbrk+0x64>)
 8000750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000752:	68fb      	ldr	r3, [r7, #12]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3718      	adds	r7, #24
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20020000 	.word	0x20020000
 8000760:	00000400 	.word	0x00000400
 8000764:	20000094 	.word	0x20000094
 8000768:	200000c0 	.word	0x200000c0

0800076c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800076c:	480d      	ldr	r0, [pc, #52]	; (80007a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800076e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000770:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000774:	480c      	ldr	r0, [pc, #48]	; (80007a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000776:	490d      	ldr	r1, [pc, #52]	; (80007ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000778:	4a0d      	ldr	r2, [pc, #52]	; (80007b0 <LoopForever+0xe>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800077c:	e002      	b.n	8000784 <LoopCopyDataInit>

0800077e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000782:	3304      	adds	r3, #4

08000784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000788:	d3f9      	bcc.n	800077e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078a:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800078c:	4c0a      	ldr	r4, [pc, #40]	; (80007b8 <LoopForever+0x16>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000790:	e001      	b.n	8000796 <LoopFillZerobss>

08000792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000794:	3204      	adds	r2, #4

08000796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000798:	d3fb      	bcc.n	8000792 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800079a:	f000 f817 	bl	80007cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800079e:	f7ff fda1 	bl	80002e4 <main>

080007a2 <LoopForever>:

LoopForever:
    b LoopForever
 80007a2:	e7fe      	b.n	80007a2 <LoopForever>
  ldr   r0, =_estack
 80007a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ac:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80007b0:	08001284 	.word	0x08001284
  ldr r2, =_sbss
 80007b4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80007b8:	200000c0 	.word	0x200000c0

080007bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007bc:	e7fe      	b.n	80007bc <ADC_IRQHandler>
	...

080007c0 <__errno>:
 80007c0:	4b01      	ldr	r3, [pc, #4]	; (80007c8 <__errno+0x8>)
 80007c2:	6818      	ldr	r0, [r3, #0]
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	20000010 	.word	0x20000010

080007cc <__libc_init_array>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	4d0d      	ldr	r5, [pc, #52]	; (8000804 <__libc_init_array+0x38>)
 80007d0:	4c0d      	ldr	r4, [pc, #52]	; (8000808 <__libc_init_array+0x3c>)
 80007d2:	1b64      	subs	r4, r4, r5
 80007d4:	10a4      	asrs	r4, r4, #2
 80007d6:	2600      	movs	r6, #0
 80007d8:	42a6      	cmp	r6, r4
 80007da:	d109      	bne.n	80007f0 <__libc_init_array+0x24>
 80007dc:	4d0b      	ldr	r5, [pc, #44]	; (800080c <__libc_init_array+0x40>)
 80007de:	4c0c      	ldr	r4, [pc, #48]	; (8000810 <__libc_init_array+0x44>)
 80007e0:	f000 fce4 	bl	80011ac <_init>
 80007e4:	1b64      	subs	r4, r4, r5
 80007e6:	10a4      	asrs	r4, r4, #2
 80007e8:	2600      	movs	r6, #0
 80007ea:	42a6      	cmp	r6, r4
 80007ec:	d105      	bne.n	80007fa <__libc_init_array+0x2e>
 80007ee:	bd70      	pop	{r4, r5, r6, pc}
 80007f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80007f4:	4798      	blx	r3
 80007f6:	3601      	adds	r6, #1
 80007f8:	e7ee      	b.n	80007d8 <__libc_init_array+0xc>
 80007fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80007fe:	4798      	blx	r3
 8000800:	3601      	adds	r6, #1
 8000802:	e7f2      	b.n	80007ea <__libc_init_array+0x1e>
 8000804:	0800127c 	.word	0x0800127c
 8000808:	0800127c 	.word	0x0800127c
 800080c:	0800127c 	.word	0x0800127c
 8000810:	08001280 	.word	0x08001280

08000814 <memset>:
 8000814:	4402      	add	r2, r0
 8000816:	4603      	mov	r3, r0
 8000818:	4293      	cmp	r3, r2
 800081a:	d100      	bne.n	800081e <memset+0xa>
 800081c:	4770      	bx	lr
 800081e:	f803 1b01 	strb.w	r1, [r3], #1
 8000822:	e7f9      	b.n	8000818 <memset+0x4>

08000824 <_puts_r>:
 8000824:	b570      	push	{r4, r5, r6, lr}
 8000826:	460e      	mov	r6, r1
 8000828:	4605      	mov	r5, r0
 800082a:	b118      	cbz	r0, 8000834 <_puts_r+0x10>
 800082c:	6983      	ldr	r3, [r0, #24]
 800082e:	b90b      	cbnz	r3, 8000834 <_puts_r+0x10>
 8000830:	f000 fa48 	bl	8000cc4 <__sinit>
 8000834:	69ab      	ldr	r3, [r5, #24]
 8000836:	68ac      	ldr	r4, [r5, #8]
 8000838:	b913      	cbnz	r3, 8000840 <_puts_r+0x1c>
 800083a:	4628      	mov	r0, r5
 800083c:	f000 fa42 	bl	8000cc4 <__sinit>
 8000840:	4b2c      	ldr	r3, [pc, #176]	; (80008f4 <_puts_r+0xd0>)
 8000842:	429c      	cmp	r4, r3
 8000844:	d120      	bne.n	8000888 <_puts_r+0x64>
 8000846:	686c      	ldr	r4, [r5, #4]
 8000848:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800084a:	07db      	lsls	r3, r3, #31
 800084c:	d405      	bmi.n	800085a <_puts_r+0x36>
 800084e:	89a3      	ldrh	r3, [r4, #12]
 8000850:	0598      	lsls	r0, r3, #22
 8000852:	d402      	bmi.n	800085a <_puts_r+0x36>
 8000854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000856:	f000 fad3 	bl	8000e00 <__retarget_lock_acquire_recursive>
 800085a:	89a3      	ldrh	r3, [r4, #12]
 800085c:	0719      	lsls	r1, r3, #28
 800085e:	d51d      	bpl.n	800089c <_puts_r+0x78>
 8000860:	6923      	ldr	r3, [r4, #16]
 8000862:	b1db      	cbz	r3, 800089c <_puts_r+0x78>
 8000864:	3e01      	subs	r6, #1
 8000866:	68a3      	ldr	r3, [r4, #8]
 8000868:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800086c:	3b01      	subs	r3, #1
 800086e:	60a3      	str	r3, [r4, #8]
 8000870:	bb39      	cbnz	r1, 80008c2 <_puts_r+0x9e>
 8000872:	2b00      	cmp	r3, #0
 8000874:	da38      	bge.n	80008e8 <_puts_r+0xc4>
 8000876:	4622      	mov	r2, r4
 8000878:	210a      	movs	r1, #10
 800087a:	4628      	mov	r0, r5
 800087c:	f000 f848 	bl	8000910 <__swbuf_r>
 8000880:	3001      	adds	r0, #1
 8000882:	d011      	beq.n	80008a8 <_puts_r+0x84>
 8000884:	250a      	movs	r5, #10
 8000886:	e011      	b.n	80008ac <_puts_r+0x88>
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <_puts_r+0xd4>)
 800088a:	429c      	cmp	r4, r3
 800088c:	d101      	bne.n	8000892 <_puts_r+0x6e>
 800088e:	68ac      	ldr	r4, [r5, #8]
 8000890:	e7da      	b.n	8000848 <_puts_r+0x24>
 8000892:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <_puts_r+0xd8>)
 8000894:	429c      	cmp	r4, r3
 8000896:	bf08      	it	eq
 8000898:	68ec      	ldreq	r4, [r5, #12]
 800089a:	e7d5      	b.n	8000848 <_puts_r+0x24>
 800089c:	4621      	mov	r1, r4
 800089e:	4628      	mov	r0, r5
 80008a0:	f000 f888 	bl	80009b4 <__swsetup_r>
 80008a4:	2800      	cmp	r0, #0
 80008a6:	d0dd      	beq.n	8000864 <_puts_r+0x40>
 80008a8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80008ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80008ae:	07da      	lsls	r2, r3, #31
 80008b0:	d405      	bmi.n	80008be <_puts_r+0x9a>
 80008b2:	89a3      	ldrh	r3, [r4, #12]
 80008b4:	059b      	lsls	r3, r3, #22
 80008b6:	d402      	bmi.n	80008be <_puts_r+0x9a>
 80008b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80008ba:	f000 faa2 	bl	8000e02 <__retarget_lock_release_recursive>
 80008be:	4628      	mov	r0, r5
 80008c0:	bd70      	pop	{r4, r5, r6, pc}
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	da04      	bge.n	80008d0 <_puts_r+0xac>
 80008c6:	69a2      	ldr	r2, [r4, #24]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	dc06      	bgt.n	80008da <_puts_r+0xb6>
 80008cc:	290a      	cmp	r1, #10
 80008ce:	d004      	beq.n	80008da <_puts_r+0xb6>
 80008d0:	6823      	ldr	r3, [r4, #0]
 80008d2:	1c5a      	adds	r2, r3, #1
 80008d4:	6022      	str	r2, [r4, #0]
 80008d6:	7019      	strb	r1, [r3, #0]
 80008d8:	e7c5      	b.n	8000866 <_puts_r+0x42>
 80008da:	4622      	mov	r2, r4
 80008dc:	4628      	mov	r0, r5
 80008de:	f000 f817 	bl	8000910 <__swbuf_r>
 80008e2:	3001      	adds	r0, #1
 80008e4:	d1bf      	bne.n	8000866 <_puts_r+0x42>
 80008e6:	e7df      	b.n	80008a8 <_puts_r+0x84>
 80008e8:	6823      	ldr	r3, [r4, #0]
 80008ea:	250a      	movs	r5, #10
 80008ec:	1c5a      	adds	r2, r3, #1
 80008ee:	6022      	str	r2, [r4, #0]
 80008f0:	701d      	strb	r5, [r3, #0]
 80008f2:	e7db      	b.n	80008ac <_puts_r+0x88>
 80008f4:	0800123c 	.word	0x0800123c
 80008f8:	0800125c 	.word	0x0800125c
 80008fc:	0800121c 	.word	0x0800121c

08000900 <puts>:
 8000900:	4b02      	ldr	r3, [pc, #8]	; (800090c <puts+0xc>)
 8000902:	4601      	mov	r1, r0
 8000904:	6818      	ldr	r0, [r3, #0]
 8000906:	f7ff bf8d 	b.w	8000824 <_puts_r>
 800090a:	bf00      	nop
 800090c:	20000010 	.word	0x20000010

08000910 <__swbuf_r>:
 8000910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000912:	460e      	mov	r6, r1
 8000914:	4614      	mov	r4, r2
 8000916:	4605      	mov	r5, r0
 8000918:	b118      	cbz	r0, 8000922 <__swbuf_r+0x12>
 800091a:	6983      	ldr	r3, [r0, #24]
 800091c:	b90b      	cbnz	r3, 8000922 <__swbuf_r+0x12>
 800091e:	f000 f9d1 	bl	8000cc4 <__sinit>
 8000922:	4b21      	ldr	r3, [pc, #132]	; (80009a8 <__swbuf_r+0x98>)
 8000924:	429c      	cmp	r4, r3
 8000926:	d12b      	bne.n	8000980 <__swbuf_r+0x70>
 8000928:	686c      	ldr	r4, [r5, #4]
 800092a:	69a3      	ldr	r3, [r4, #24]
 800092c:	60a3      	str	r3, [r4, #8]
 800092e:	89a3      	ldrh	r3, [r4, #12]
 8000930:	071a      	lsls	r2, r3, #28
 8000932:	d52f      	bpl.n	8000994 <__swbuf_r+0x84>
 8000934:	6923      	ldr	r3, [r4, #16]
 8000936:	b36b      	cbz	r3, 8000994 <__swbuf_r+0x84>
 8000938:	6923      	ldr	r3, [r4, #16]
 800093a:	6820      	ldr	r0, [r4, #0]
 800093c:	1ac0      	subs	r0, r0, r3
 800093e:	6963      	ldr	r3, [r4, #20]
 8000940:	b2f6      	uxtb	r6, r6
 8000942:	4283      	cmp	r3, r0
 8000944:	4637      	mov	r7, r6
 8000946:	dc04      	bgt.n	8000952 <__swbuf_r+0x42>
 8000948:	4621      	mov	r1, r4
 800094a:	4628      	mov	r0, r5
 800094c:	f000 f926 	bl	8000b9c <_fflush_r>
 8000950:	bb30      	cbnz	r0, 80009a0 <__swbuf_r+0x90>
 8000952:	68a3      	ldr	r3, [r4, #8]
 8000954:	3b01      	subs	r3, #1
 8000956:	60a3      	str	r3, [r4, #8]
 8000958:	6823      	ldr	r3, [r4, #0]
 800095a:	1c5a      	adds	r2, r3, #1
 800095c:	6022      	str	r2, [r4, #0]
 800095e:	701e      	strb	r6, [r3, #0]
 8000960:	6963      	ldr	r3, [r4, #20]
 8000962:	3001      	adds	r0, #1
 8000964:	4283      	cmp	r3, r0
 8000966:	d004      	beq.n	8000972 <__swbuf_r+0x62>
 8000968:	89a3      	ldrh	r3, [r4, #12]
 800096a:	07db      	lsls	r3, r3, #31
 800096c:	d506      	bpl.n	800097c <__swbuf_r+0x6c>
 800096e:	2e0a      	cmp	r6, #10
 8000970:	d104      	bne.n	800097c <__swbuf_r+0x6c>
 8000972:	4621      	mov	r1, r4
 8000974:	4628      	mov	r0, r5
 8000976:	f000 f911 	bl	8000b9c <_fflush_r>
 800097a:	b988      	cbnz	r0, 80009a0 <__swbuf_r+0x90>
 800097c:	4638      	mov	r0, r7
 800097e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000980:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <__swbuf_r+0x9c>)
 8000982:	429c      	cmp	r4, r3
 8000984:	d101      	bne.n	800098a <__swbuf_r+0x7a>
 8000986:	68ac      	ldr	r4, [r5, #8]
 8000988:	e7cf      	b.n	800092a <__swbuf_r+0x1a>
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <__swbuf_r+0xa0>)
 800098c:	429c      	cmp	r4, r3
 800098e:	bf08      	it	eq
 8000990:	68ec      	ldreq	r4, [r5, #12]
 8000992:	e7ca      	b.n	800092a <__swbuf_r+0x1a>
 8000994:	4621      	mov	r1, r4
 8000996:	4628      	mov	r0, r5
 8000998:	f000 f80c 	bl	80009b4 <__swsetup_r>
 800099c:	2800      	cmp	r0, #0
 800099e:	d0cb      	beq.n	8000938 <__swbuf_r+0x28>
 80009a0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80009a4:	e7ea      	b.n	800097c <__swbuf_r+0x6c>
 80009a6:	bf00      	nop
 80009a8:	0800123c 	.word	0x0800123c
 80009ac:	0800125c 	.word	0x0800125c
 80009b0:	0800121c 	.word	0x0800121c

080009b4 <__swsetup_r>:
 80009b4:	4b32      	ldr	r3, [pc, #200]	; (8000a80 <__swsetup_r+0xcc>)
 80009b6:	b570      	push	{r4, r5, r6, lr}
 80009b8:	681d      	ldr	r5, [r3, #0]
 80009ba:	4606      	mov	r6, r0
 80009bc:	460c      	mov	r4, r1
 80009be:	b125      	cbz	r5, 80009ca <__swsetup_r+0x16>
 80009c0:	69ab      	ldr	r3, [r5, #24]
 80009c2:	b913      	cbnz	r3, 80009ca <__swsetup_r+0x16>
 80009c4:	4628      	mov	r0, r5
 80009c6:	f000 f97d 	bl	8000cc4 <__sinit>
 80009ca:	4b2e      	ldr	r3, [pc, #184]	; (8000a84 <__swsetup_r+0xd0>)
 80009cc:	429c      	cmp	r4, r3
 80009ce:	d10f      	bne.n	80009f0 <__swsetup_r+0x3c>
 80009d0:	686c      	ldr	r4, [r5, #4]
 80009d2:	89a3      	ldrh	r3, [r4, #12]
 80009d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80009d8:	0719      	lsls	r1, r3, #28
 80009da:	d42c      	bmi.n	8000a36 <__swsetup_r+0x82>
 80009dc:	06dd      	lsls	r5, r3, #27
 80009de:	d411      	bmi.n	8000a04 <__swsetup_r+0x50>
 80009e0:	2309      	movs	r3, #9
 80009e2:	6033      	str	r3, [r6, #0]
 80009e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80009e8:	81a3      	strh	r3, [r4, #12]
 80009ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009ee:	e03e      	b.n	8000a6e <__swsetup_r+0xba>
 80009f0:	4b25      	ldr	r3, [pc, #148]	; (8000a88 <__swsetup_r+0xd4>)
 80009f2:	429c      	cmp	r4, r3
 80009f4:	d101      	bne.n	80009fa <__swsetup_r+0x46>
 80009f6:	68ac      	ldr	r4, [r5, #8]
 80009f8:	e7eb      	b.n	80009d2 <__swsetup_r+0x1e>
 80009fa:	4b24      	ldr	r3, [pc, #144]	; (8000a8c <__swsetup_r+0xd8>)
 80009fc:	429c      	cmp	r4, r3
 80009fe:	bf08      	it	eq
 8000a00:	68ec      	ldreq	r4, [r5, #12]
 8000a02:	e7e6      	b.n	80009d2 <__swsetup_r+0x1e>
 8000a04:	0758      	lsls	r0, r3, #29
 8000a06:	d512      	bpl.n	8000a2e <__swsetup_r+0x7a>
 8000a08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a0a:	b141      	cbz	r1, 8000a1e <__swsetup_r+0x6a>
 8000a0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a10:	4299      	cmp	r1, r3
 8000a12:	d002      	beq.n	8000a1a <__swsetup_r+0x66>
 8000a14:	4630      	mov	r0, r6
 8000a16:	f000 fa59 	bl	8000ecc <_free_r>
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	6363      	str	r3, [r4, #52]	; 0x34
 8000a1e:	89a3      	ldrh	r3, [r4, #12]
 8000a20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000a24:	81a3      	strh	r3, [r4, #12]
 8000a26:	2300      	movs	r3, #0
 8000a28:	6063      	str	r3, [r4, #4]
 8000a2a:	6923      	ldr	r3, [r4, #16]
 8000a2c:	6023      	str	r3, [r4, #0]
 8000a2e:	89a3      	ldrh	r3, [r4, #12]
 8000a30:	f043 0308 	orr.w	r3, r3, #8
 8000a34:	81a3      	strh	r3, [r4, #12]
 8000a36:	6923      	ldr	r3, [r4, #16]
 8000a38:	b94b      	cbnz	r3, 8000a4e <__swsetup_r+0x9a>
 8000a3a:	89a3      	ldrh	r3, [r4, #12]
 8000a3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a44:	d003      	beq.n	8000a4e <__swsetup_r+0x9a>
 8000a46:	4621      	mov	r1, r4
 8000a48:	4630      	mov	r0, r6
 8000a4a:	f000 f9ff 	bl	8000e4c <__smakebuf_r>
 8000a4e:	89a0      	ldrh	r0, [r4, #12]
 8000a50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a54:	f010 0301 	ands.w	r3, r0, #1
 8000a58:	d00a      	beq.n	8000a70 <__swsetup_r+0xbc>
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60a3      	str	r3, [r4, #8]
 8000a5e:	6963      	ldr	r3, [r4, #20]
 8000a60:	425b      	negs	r3, r3
 8000a62:	61a3      	str	r3, [r4, #24]
 8000a64:	6923      	ldr	r3, [r4, #16]
 8000a66:	b943      	cbnz	r3, 8000a7a <__swsetup_r+0xc6>
 8000a68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000a6c:	d1ba      	bne.n	80009e4 <__swsetup_r+0x30>
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}
 8000a70:	0781      	lsls	r1, r0, #30
 8000a72:	bf58      	it	pl
 8000a74:	6963      	ldrpl	r3, [r4, #20]
 8000a76:	60a3      	str	r3, [r4, #8]
 8000a78:	e7f4      	b.n	8000a64 <__swsetup_r+0xb0>
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	e7f7      	b.n	8000a6e <__swsetup_r+0xba>
 8000a7e:	bf00      	nop
 8000a80:	20000010 	.word	0x20000010
 8000a84:	0800123c 	.word	0x0800123c
 8000a88:	0800125c 	.word	0x0800125c
 8000a8c:	0800121c 	.word	0x0800121c

08000a90 <__sflush_r>:
 8000a90:	898a      	ldrh	r2, [r1, #12]
 8000a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a96:	4605      	mov	r5, r0
 8000a98:	0710      	lsls	r0, r2, #28
 8000a9a:	460c      	mov	r4, r1
 8000a9c:	d458      	bmi.n	8000b50 <__sflush_r+0xc0>
 8000a9e:	684b      	ldr	r3, [r1, #4]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	dc05      	bgt.n	8000ab0 <__sflush_r+0x20>
 8000aa4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	dc02      	bgt.n	8000ab0 <__sflush_r+0x20>
 8000aaa:	2000      	movs	r0, #0
 8000aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ab0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	d0f9      	beq.n	8000aaa <__sflush_r+0x1a>
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000abc:	682f      	ldr	r7, [r5, #0]
 8000abe:	602b      	str	r3, [r5, #0]
 8000ac0:	d032      	beq.n	8000b28 <__sflush_r+0x98>
 8000ac2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000ac4:	89a3      	ldrh	r3, [r4, #12]
 8000ac6:	075a      	lsls	r2, r3, #29
 8000ac8:	d505      	bpl.n	8000ad6 <__sflush_r+0x46>
 8000aca:	6863      	ldr	r3, [r4, #4]
 8000acc:	1ac0      	subs	r0, r0, r3
 8000ace:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ad0:	b10b      	cbz	r3, 8000ad6 <__sflush_r+0x46>
 8000ad2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ad4:	1ac0      	subs	r0, r0, r3
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	4602      	mov	r2, r0
 8000ada:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000adc:	6a21      	ldr	r1, [r4, #32]
 8000ade:	4628      	mov	r0, r5
 8000ae0:	47b0      	blx	r6
 8000ae2:	1c43      	adds	r3, r0, #1
 8000ae4:	89a3      	ldrh	r3, [r4, #12]
 8000ae6:	d106      	bne.n	8000af6 <__sflush_r+0x66>
 8000ae8:	6829      	ldr	r1, [r5, #0]
 8000aea:	291d      	cmp	r1, #29
 8000aec:	d82c      	bhi.n	8000b48 <__sflush_r+0xb8>
 8000aee:	4a2a      	ldr	r2, [pc, #168]	; (8000b98 <__sflush_r+0x108>)
 8000af0:	40ca      	lsrs	r2, r1
 8000af2:	07d6      	lsls	r6, r2, #31
 8000af4:	d528      	bpl.n	8000b48 <__sflush_r+0xb8>
 8000af6:	2200      	movs	r2, #0
 8000af8:	6062      	str	r2, [r4, #4]
 8000afa:	04d9      	lsls	r1, r3, #19
 8000afc:	6922      	ldr	r2, [r4, #16]
 8000afe:	6022      	str	r2, [r4, #0]
 8000b00:	d504      	bpl.n	8000b0c <__sflush_r+0x7c>
 8000b02:	1c42      	adds	r2, r0, #1
 8000b04:	d101      	bne.n	8000b0a <__sflush_r+0x7a>
 8000b06:	682b      	ldr	r3, [r5, #0]
 8000b08:	b903      	cbnz	r3, 8000b0c <__sflush_r+0x7c>
 8000b0a:	6560      	str	r0, [r4, #84]	; 0x54
 8000b0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b0e:	602f      	str	r7, [r5, #0]
 8000b10:	2900      	cmp	r1, #0
 8000b12:	d0ca      	beq.n	8000aaa <__sflush_r+0x1a>
 8000b14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b18:	4299      	cmp	r1, r3
 8000b1a:	d002      	beq.n	8000b22 <__sflush_r+0x92>
 8000b1c:	4628      	mov	r0, r5
 8000b1e:	f000 f9d5 	bl	8000ecc <_free_r>
 8000b22:	2000      	movs	r0, #0
 8000b24:	6360      	str	r0, [r4, #52]	; 0x34
 8000b26:	e7c1      	b.n	8000aac <__sflush_r+0x1c>
 8000b28:	6a21      	ldr	r1, [r4, #32]
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	4628      	mov	r0, r5
 8000b2e:	47b0      	blx	r6
 8000b30:	1c41      	adds	r1, r0, #1
 8000b32:	d1c7      	bne.n	8000ac4 <__sflush_r+0x34>
 8000b34:	682b      	ldr	r3, [r5, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d0c4      	beq.n	8000ac4 <__sflush_r+0x34>
 8000b3a:	2b1d      	cmp	r3, #29
 8000b3c:	d001      	beq.n	8000b42 <__sflush_r+0xb2>
 8000b3e:	2b16      	cmp	r3, #22
 8000b40:	d101      	bne.n	8000b46 <__sflush_r+0xb6>
 8000b42:	602f      	str	r7, [r5, #0]
 8000b44:	e7b1      	b.n	8000aaa <__sflush_r+0x1a>
 8000b46:	89a3      	ldrh	r3, [r4, #12]
 8000b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b4c:	81a3      	strh	r3, [r4, #12]
 8000b4e:	e7ad      	b.n	8000aac <__sflush_r+0x1c>
 8000b50:	690f      	ldr	r7, [r1, #16]
 8000b52:	2f00      	cmp	r7, #0
 8000b54:	d0a9      	beq.n	8000aaa <__sflush_r+0x1a>
 8000b56:	0793      	lsls	r3, r2, #30
 8000b58:	680e      	ldr	r6, [r1, #0]
 8000b5a:	bf08      	it	eq
 8000b5c:	694b      	ldreq	r3, [r1, #20]
 8000b5e:	600f      	str	r7, [r1, #0]
 8000b60:	bf18      	it	ne
 8000b62:	2300      	movne	r3, #0
 8000b64:	eba6 0807 	sub.w	r8, r6, r7
 8000b68:	608b      	str	r3, [r1, #8]
 8000b6a:	f1b8 0f00 	cmp.w	r8, #0
 8000b6e:	dd9c      	ble.n	8000aaa <__sflush_r+0x1a>
 8000b70:	6a21      	ldr	r1, [r4, #32]
 8000b72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000b74:	4643      	mov	r3, r8
 8000b76:	463a      	mov	r2, r7
 8000b78:	4628      	mov	r0, r5
 8000b7a:	47b0      	blx	r6
 8000b7c:	2800      	cmp	r0, #0
 8000b7e:	dc06      	bgt.n	8000b8e <__sflush_r+0xfe>
 8000b80:	89a3      	ldrh	r3, [r4, #12]
 8000b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b86:	81a3      	strh	r3, [r4, #12]
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b8c:	e78e      	b.n	8000aac <__sflush_r+0x1c>
 8000b8e:	4407      	add	r7, r0
 8000b90:	eba8 0800 	sub.w	r8, r8, r0
 8000b94:	e7e9      	b.n	8000b6a <__sflush_r+0xda>
 8000b96:	bf00      	nop
 8000b98:	20400001 	.word	0x20400001

08000b9c <_fflush_r>:
 8000b9c:	b538      	push	{r3, r4, r5, lr}
 8000b9e:	690b      	ldr	r3, [r1, #16]
 8000ba0:	4605      	mov	r5, r0
 8000ba2:	460c      	mov	r4, r1
 8000ba4:	b913      	cbnz	r3, 8000bac <_fflush_r+0x10>
 8000ba6:	2500      	movs	r5, #0
 8000ba8:	4628      	mov	r0, r5
 8000baa:	bd38      	pop	{r3, r4, r5, pc}
 8000bac:	b118      	cbz	r0, 8000bb6 <_fflush_r+0x1a>
 8000bae:	6983      	ldr	r3, [r0, #24]
 8000bb0:	b90b      	cbnz	r3, 8000bb6 <_fflush_r+0x1a>
 8000bb2:	f000 f887 	bl	8000cc4 <__sinit>
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <_fflush_r+0x6c>)
 8000bb8:	429c      	cmp	r4, r3
 8000bba:	d11b      	bne.n	8000bf4 <_fflush_r+0x58>
 8000bbc:	686c      	ldr	r4, [r5, #4]
 8000bbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d0ef      	beq.n	8000ba6 <_fflush_r+0xa>
 8000bc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000bc8:	07d0      	lsls	r0, r2, #31
 8000bca:	d404      	bmi.n	8000bd6 <_fflush_r+0x3a>
 8000bcc:	0599      	lsls	r1, r3, #22
 8000bce:	d402      	bmi.n	8000bd6 <_fflush_r+0x3a>
 8000bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000bd2:	f000 f915 	bl	8000e00 <__retarget_lock_acquire_recursive>
 8000bd6:	4628      	mov	r0, r5
 8000bd8:	4621      	mov	r1, r4
 8000bda:	f7ff ff59 	bl	8000a90 <__sflush_r>
 8000bde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000be0:	07da      	lsls	r2, r3, #31
 8000be2:	4605      	mov	r5, r0
 8000be4:	d4e0      	bmi.n	8000ba8 <_fflush_r+0xc>
 8000be6:	89a3      	ldrh	r3, [r4, #12]
 8000be8:	059b      	lsls	r3, r3, #22
 8000bea:	d4dd      	bmi.n	8000ba8 <_fflush_r+0xc>
 8000bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000bee:	f000 f908 	bl	8000e02 <__retarget_lock_release_recursive>
 8000bf2:	e7d9      	b.n	8000ba8 <_fflush_r+0xc>
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <_fflush_r+0x70>)
 8000bf6:	429c      	cmp	r4, r3
 8000bf8:	d101      	bne.n	8000bfe <_fflush_r+0x62>
 8000bfa:	68ac      	ldr	r4, [r5, #8]
 8000bfc:	e7df      	b.n	8000bbe <_fflush_r+0x22>
 8000bfe:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <_fflush_r+0x74>)
 8000c00:	429c      	cmp	r4, r3
 8000c02:	bf08      	it	eq
 8000c04:	68ec      	ldreq	r4, [r5, #12]
 8000c06:	e7da      	b.n	8000bbe <_fflush_r+0x22>
 8000c08:	0800123c 	.word	0x0800123c
 8000c0c:	0800125c 	.word	0x0800125c
 8000c10:	0800121c 	.word	0x0800121c

08000c14 <std>:
 8000c14:	2300      	movs	r3, #0
 8000c16:	b510      	push	{r4, lr}
 8000c18:	4604      	mov	r4, r0
 8000c1a:	e9c0 3300 	strd	r3, r3, [r0]
 8000c1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000c22:	6083      	str	r3, [r0, #8]
 8000c24:	8181      	strh	r1, [r0, #12]
 8000c26:	6643      	str	r3, [r0, #100]	; 0x64
 8000c28:	81c2      	strh	r2, [r0, #14]
 8000c2a:	6183      	str	r3, [r0, #24]
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	2208      	movs	r2, #8
 8000c30:	305c      	adds	r0, #92	; 0x5c
 8000c32:	f7ff fdef 	bl	8000814 <memset>
 8000c36:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <std+0x38>)
 8000c38:	6263      	str	r3, [r4, #36]	; 0x24
 8000c3a:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <std+0x3c>)
 8000c3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <std+0x40>)
 8000c40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c42:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <std+0x44>)
 8000c44:	6224      	str	r4, [r4, #32]
 8000c46:	6323      	str	r3, [r4, #48]	; 0x30
 8000c48:	bd10      	pop	{r4, pc}
 8000c4a:	bf00      	nop
 8000c4c:	0800103d 	.word	0x0800103d
 8000c50:	0800105f 	.word	0x0800105f
 8000c54:	08001097 	.word	0x08001097
 8000c58:	080010bb 	.word	0x080010bb

08000c5c <_cleanup_r>:
 8000c5c:	4901      	ldr	r1, [pc, #4]	; (8000c64 <_cleanup_r+0x8>)
 8000c5e:	f000 b8af 	b.w	8000dc0 <_fwalk_reent>
 8000c62:	bf00      	nop
 8000c64:	08000b9d 	.word	0x08000b9d

08000c68 <__sfmoreglue>:
 8000c68:	b570      	push	{r4, r5, r6, lr}
 8000c6a:	1e4a      	subs	r2, r1, #1
 8000c6c:	2568      	movs	r5, #104	; 0x68
 8000c6e:	4355      	muls	r5, r2
 8000c70:	460e      	mov	r6, r1
 8000c72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000c76:	f000 f977 	bl	8000f68 <_malloc_r>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	b140      	cbz	r0, 8000c90 <__sfmoreglue+0x28>
 8000c7e:	2100      	movs	r1, #0
 8000c80:	e9c0 1600 	strd	r1, r6, [r0]
 8000c84:	300c      	adds	r0, #12
 8000c86:	60a0      	str	r0, [r4, #8]
 8000c88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000c8c:	f7ff fdc2 	bl	8000814 <memset>
 8000c90:	4620      	mov	r0, r4
 8000c92:	bd70      	pop	{r4, r5, r6, pc}

08000c94 <__sfp_lock_acquire>:
 8000c94:	4801      	ldr	r0, [pc, #4]	; (8000c9c <__sfp_lock_acquire+0x8>)
 8000c96:	f000 b8b3 	b.w	8000e00 <__retarget_lock_acquire_recursive>
 8000c9a:	bf00      	nop
 8000c9c:	200000b8 	.word	0x200000b8

08000ca0 <__sfp_lock_release>:
 8000ca0:	4801      	ldr	r0, [pc, #4]	; (8000ca8 <__sfp_lock_release+0x8>)
 8000ca2:	f000 b8ae 	b.w	8000e02 <__retarget_lock_release_recursive>
 8000ca6:	bf00      	nop
 8000ca8:	200000b8 	.word	0x200000b8

08000cac <__sinit_lock_acquire>:
 8000cac:	4801      	ldr	r0, [pc, #4]	; (8000cb4 <__sinit_lock_acquire+0x8>)
 8000cae:	f000 b8a7 	b.w	8000e00 <__retarget_lock_acquire_recursive>
 8000cb2:	bf00      	nop
 8000cb4:	200000b3 	.word	0x200000b3

08000cb8 <__sinit_lock_release>:
 8000cb8:	4801      	ldr	r0, [pc, #4]	; (8000cc0 <__sinit_lock_release+0x8>)
 8000cba:	f000 b8a2 	b.w	8000e02 <__retarget_lock_release_recursive>
 8000cbe:	bf00      	nop
 8000cc0:	200000b3 	.word	0x200000b3

08000cc4 <__sinit>:
 8000cc4:	b510      	push	{r4, lr}
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	f7ff fff0 	bl	8000cac <__sinit_lock_acquire>
 8000ccc:	69a3      	ldr	r3, [r4, #24]
 8000cce:	b11b      	cbz	r3, 8000cd8 <__sinit+0x14>
 8000cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000cd4:	f7ff bff0 	b.w	8000cb8 <__sinit_lock_release>
 8000cd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000cdc:	6523      	str	r3, [r4, #80]	; 0x50
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <__sinit+0x68>)
 8000ce0:	4a13      	ldr	r2, [pc, #76]	; (8000d30 <__sinit+0x6c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	62a2      	str	r2, [r4, #40]	; 0x28
 8000ce6:	42a3      	cmp	r3, r4
 8000ce8:	bf04      	itt	eq
 8000cea:	2301      	moveq	r3, #1
 8000cec:	61a3      	streq	r3, [r4, #24]
 8000cee:	4620      	mov	r0, r4
 8000cf0:	f000 f820 	bl	8000d34 <__sfp>
 8000cf4:	6060      	str	r0, [r4, #4]
 8000cf6:	4620      	mov	r0, r4
 8000cf8:	f000 f81c 	bl	8000d34 <__sfp>
 8000cfc:	60a0      	str	r0, [r4, #8]
 8000cfe:	4620      	mov	r0, r4
 8000d00:	f000 f818 	bl	8000d34 <__sfp>
 8000d04:	2200      	movs	r2, #0
 8000d06:	60e0      	str	r0, [r4, #12]
 8000d08:	2104      	movs	r1, #4
 8000d0a:	6860      	ldr	r0, [r4, #4]
 8000d0c:	f7ff ff82 	bl	8000c14 <std>
 8000d10:	68a0      	ldr	r0, [r4, #8]
 8000d12:	2201      	movs	r2, #1
 8000d14:	2109      	movs	r1, #9
 8000d16:	f7ff ff7d 	bl	8000c14 <std>
 8000d1a:	68e0      	ldr	r0, [r4, #12]
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	2112      	movs	r1, #18
 8000d20:	f7ff ff78 	bl	8000c14 <std>
 8000d24:	2301      	movs	r3, #1
 8000d26:	61a3      	str	r3, [r4, #24]
 8000d28:	e7d2      	b.n	8000cd0 <__sinit+0xc>
 8000d2a:	bf00      	nop
 8000d2c:	08001218 	.word	0x08001218
 8000d30:	08000c5d 	.word	0x08000c5d

08000d34 <__sfp>:
 8000d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d36:	4607      	mov	r7, r0
 8000d38:	f7ff ffac 	bl	8000c94 <__sfp_lock_acquire>
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <__sfp+0x84>)
 8000d3e:	681e      	ldr	r6, [r3, #0]
 8000d40:	69b3      	ldr	r3, [r6, #24]
 8000d42:	b913      	cbnz	r3, 8000d4a <__sfp+0x16>
 8000d44:	4630      	mov	r0, r6
 8000d46:	f7ff ffbd 	bl	8000cc4 <__sinit>
 8000d4a:	3648      	adds	r6, #72	; 0x48
 8000d4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000d50:	3b01      	subs	r3, #1
 8000d52:	d503      	bpl.n	8000d5c <__sfp+0x28>
 8000d54:	6833      	ldr	r3, [r6, #0]
 8000d56:	b30b      	cbz	r3, 8000d9c <__sfp+0x68>
 8000d58:	6836      	ldr	r6, [r6, #0]
 8000d5a:	e7f7      	b.n	8000d4c <__sfp+0x18>
 8000d5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000d60:	b9d5      	cbnz	r5, 8000d98 <__sfp+0x64>
 8000d62:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <__sfp+0x88>)
 8000d64:	60e3      	str	r3, [r4, #12]
 8000d66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000d6a:	6665      	str	r5, [r4, #100]	; 0x64
 8000d6c:	f000 f847 	bl	8000dfe <__retarget_lock_init_recursive>
 8000d70:	f7ff ff96 	bl	8000ca0 <__sfp_lock_release>
 8000d74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000d78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000d7c:	6025      	str	r5, [r4, #0]
 8000d7e:	61a5      	str	r5, [r4, #24]
 8000d80:	2208      	movs	r2, #8
 8000d82:	4629      	mov	r1, r5
 8000d84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000d88:	f7ff fd44 	bl	8000814 <memset>
 8000d8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000d90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000d94:	4620      	mov	r0, r4
 8000d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d98:	3468      	adds	r4, #104	; 0x68
 8000d9a:	e7d9      	b.n	8000d50 <__sfp+0x1c>
 8000d9c:	2104      	movs	r1, #4
 8000d9e:	4638      	mov	r0, r7
 8000da0:	f7ff ff62 	bl	8000c68 <__sfmoreglue>
 8000da4:	4604      	mov	r4, r0
 8000da6:	6030      	str	r0, [r6, #0]
 8000da8:	2800      	cmp	r0, #0
 8000daa:	d1d5      	bne.n	8000d58 <__sfp+0x24>
 8000dac:	f7ff ff78 	bl	8000ca0 <__sfp_lock_release>
 8000db0:	230c      	movs	r3, #12
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	e7ee      	b.n	8000d94 <__sfp+0x60>
 8000db6:	bf00      	nop
 8000db8:	08001218 	.word	0x08001218
 8000dbc:	ffff0001 	.word	0xffff0001

08000dc0 <_fwalk_reent>:
 8000dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000dc4:	4606      	mov	r6, r0
 8000dc6:	4688      	mov	r8, r1
 8000dc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000dcc:	2700      	movs	r7, #0
 8000dce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000dd2:	f1b9 0901 	subs.w	r9, r9, #1
 8000dd6:	d505      	bpl.n	8000de4 <_fwalk_reent+0x24>
 8000dd8:	6824      	ldr	r4, [r4, #0]
 8000dda:	2c00      	cmp	r4, #0
 8000ddc:	d1f7      	bne.n	8000dce <_fwalk_reent+0xe>
 8000dde:	4638      	mov	r0, r7
 8000de0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000de4:	89ab      	ldrh	r3, [r5, #12]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d907      	bls.n	8000dfa <_fwalk_reent+0x3a>
 8000dea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000dee:	3301      	adds	r3, #1
 8000df0:	d003      	beq.n	8000dfa <_fwalk_reent+0x3a>
 8000df2:	4629      	mov	r1, r5
 8000df4:	4630      	mov	r0, r6
 8000df6:	47c0      	blx	r8
 8000df8:	4307      	orrs	r7, r0
 8000dfa:	3568      	adds	r5, #104	; 0x68
 8000dfc:	e7e9      	b.n	8000dd2 <_fwalk_reent+0x12>

08000dfe <__retarget_lock_init_recursive>:
 8000dfe:	4770      	bx	lr

08000e00 <__retarget_lock_acquire_recursive>:
 8000e00:	4770      	bx	lr

08000e02 <__retarget_lock_release_recursive>:
 8000e02:	4770      	bx	lr

08000e04 <__swhatbuf_r>:
 8000e04:	b570      	push	{r4, r5, r6, lr}
 8000e06:	460e      	mov	r6, r1
 8000e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e0c:	2900      	cmp	r1, #0
 8000e0e:	b096      	sub	sp, #88	; 0x58
 8000e10:	4614      	mov	r4, r2
 8000e12:	461d      	mov	r5, r3
 8000e14:	da07      	bge.n	8000e26 <__swhatbuf_r+0x22>
 8000e16:	2300      	movs	r3, #0
 8000e18:	602b      	str	r3, [r5, #0]
 8000e1a:	89b3      	ldrh	r3, [r6, #12]
 8000e1c:	061a      	lsls	r2, r3, #24
 8000e1e:	d410      	bmi.n	8000e42 <__swhatbuf_r+0x3e>
 8000e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e24:	e00e      	b.n	8000e44 <__swhatbuf_r+0x40>
 8000e26:	466a      	mov	r2, sp
 8000e28:	f000 f96e 	bl	8001108 <_fstat_r>
 8000e2c:	2800      	cmp	r0, #0
 8000e2e:	dbf2      	blt.n	8000e16 <__swhatbuf_r+0x12>
 8000e30:	9a01      	ldr	r2, [sp, #4]
 8000e32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000e36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000e3a:	425a      	negs	r2, r3
 8000e3c:	415a      	adcs	r2, r3
 8000e3e:	602a      	str	r2, [r5, #0]
 8000e40:	e7ee      	b.n	8000e20 <__swhatbuf_r+0x1c>
 8000e42:	2340      	movs	r3, #64	; 0x40
 8000e44:	2000      	movs	r0, #0
 8000e46:	6023      	str	r3, [r4, #0]
 8000e48:	b016      	add	sp, #88	; 0x58
 8000e4a:	bd70      	pop	{r4, r5, r6, pc}

08000e4c <__smakebuf_r>:
 8000e4c:	898b      	ldrh	r3, [r1, #12]
 8000e4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000e50:	079d      	lsls	r5, r3, #30
 8000e52:	4606      	mov	r6, r0
 8000e54:	460c      	mov	r4, r1
 8000e56:	d507      	bpl.n	8000e68 <__smakebuf_r+0x1c>
 8000e58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000e5c:	6023      	str	r3, [r4, #0]
 8000e5e:	6123      	str	r3, [r4, #16]
 8000e60:	2301      	movs	r3, #1
 8000e62:	6163      	str	r3, [r4, #20]
 8000e64:	b002      	add	sp, #8
 8000e66:	bd70      	pop	{r4, r5, r6, pc}
 8000e68:	ab01      	add	r3, sp, #4
 8000e6a:	466a      	mov	r2, sp
 8000e6c:	f7ff ffca 	bl	8000e04 <__swhatbuf_r>
 8000e70:	9900      	ldr	r1, [sp, #0]
 8000e72:	4605      	mov	r5, r0
 8000e74:	4630      	mov	r0, r6
 8000e76:	f000 f877 	bl	8000f68 <_malloc_r>
 8000e7a:	b948      	cbnz	r0, 8000e90 <__smakebuf_r+0x44>
 8000e7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e80:	059a      	lsls	r2, r3, #22
 8000e82:	d4ef      	bmi.n	8000e64 <__smakebuf_r+0x18>
 8000e84:	f023 0303 	bic.w	r3, r3, #3
 8000e88:	f043 0302 	orr.w	r3, r3, #2
 8000e8c:	81a3      	strh	r3, [r4, #12]
 8000e8e:	e7e3      	b.n	8000e58 <__smakebuf_r+0xc>
 8000e90:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <__smakebuf_r+0x7c>)
 8000e92:	62b3      	str	r3, [r6, #40]	; 0x28
 8000e94:	89a3      	ldrh	r3, [r4, #12]
 8000e96:	6020      	str	r0, [r4, #0]
 8000e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e9c:	81a3      	strh	r3, [r4, #12]
 8000e9e:	9b00      	ldr	r3, [sp, #0]
 8000ea0:	6163      	str	r3, [r4, #20]
 8000ea2:	9b01      	ldr	r3, [sp, #4]
 8000ea4:	6120      	str	r0, [r4, #16]
 8000ea6:	b15b      	cbz	r3, 8000ec0 <__smakebuf_r+0x74>
 8000ea8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000eac:	4630      	mov	r0, r6
 8000eae:	f000 f93d 	bl	800112c <_isatty_r>
 8000eb2:	b128      	cbz	r0, 8000ec0 <__smakebuf_r+0x74>
 8000eb4:	89a3      	ldrh	r3, [r4, #12]
 8000eb6:	f023 0303 	bic.w	r3, r3, #3
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	81a3      	strh	r3, [r4, #12]
 8000ec0:	89a0      	ldrh	r0, [r4, #12]
 8000ec2:	4305      	orrs	r5, r0
 8000ec4:	81a5      	strh	r5, [r4, #12]
 8000ec6:	e7cd      	b.n	8000e64 <__smakebuf_r+0x18>
 8000ec8:	08000c5d 	.word	0x08000c5d

08000ecc <_free_r>:
 8000ecc:	b538      	push	{r3, r4, r5, lr}
 8000ece:	4605      	mov	r5, r0
 8000ed0:	2900      	cmp	r1, #0
 8000ed2:	d045      	beq.n	8000f60 <_free_r+0x94>
 8000ed4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ed8:	1f0c      	subs	r4, r1, #4
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	bfb8      	it	lt
 8000ede:	18e4      	addlt	r4, r4, r3
 8000ee0:	f000 f946 	bl	8001170 <__malloc_lock>
 8000ee4:	4a1f      	ldr	r2, [pc, #124]	; (8000f64 <_free_r+0x98>)
 8000ee6:	6813      	ldr	r3, [r2, #0]
 8000ee8:	4610      	mov	r0, r2
 8000eea:	b933      	cbnz	r3, 8000efa <_free_r+0x2e>
 8000eec:	6063      	str	r3, [r4, #4]
 8000eee:	6014      	str	r4, [r2, #0]
 8000ef0:	4628      	mov	r0, r5
 8000ef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ef6:	f000 b941 	b.w	800117c <__malloc_unlock>
 8000efa:	42a3      	cmp	r3, r4
 8000efc:	d90b      	bls.n	8000f16 <_free_r+0x4a>
 8000efe:	6821      	ldr	r1, [r4, #0]
 8000f00:	1862      	adds	r2, r4, r1
 8000f02:	4293      	cmp	r3, r2
 8000f04:	bf04      	itt	eq
 8000f06:	681a      	ldreq	r2, [r3, #0]
 8000f08:	685b      	ldreq	r3, [r3, #4]
 8000f0a:	6063      	str	r3, [r4, #4]
 8000f0c:	bf04      	itt	eq
 8000f0e:	1852      	addeq	r2, r2, r1
 8000f10:	6022      	streq	r2, [r4, #0]
 8000f12:	6004      	str	r4, [r0, #0]
 8000f14:	e7ec      	b.n	8000ef0 <_free_r+0x24>
 8000f16:	461a      	mov	r2, r3
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	b10b      	cbz	r3, 8000f20 <_free_r+0x54>
 8000f1c:	42a3      	cmp	r3, r4
 8000f1e:	d9fa      	bls.n	8000f16 <_free_r+0x4a>
 8000f20:	6811      	ldr	r1, [r2, #0]
 8000f22:	1850      	adds	r0, r2, r1
 8000f24:	42a0      	cmp	r0, r4
 8000f26:	d10b      	bne.n	8000f40 <_free_r+0x74>
 8000f28:	6820      	ldr	r0, [r4, #0]
 8000f2a:	4401      	add	r1, r0
 8000f2c:	1850      	adds	r0, r2, r1
 8000f2e:	4283      	cmp	r3, r0
 8000f30:	6011      	str	r1, [r2, #0]
 8000f32:	d1dd      	bne.n	8000ef0 <_free_r+0x24>
 8000f34:	6818      	ldr	r0, [r3, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	6053      	str	r3, [r2, #4]
 8000f3a:	4401      	add	r1, r0
 8000f3c:	6011      	str	r1, [r2, #0]
 8000f3e:	e7d7      	b.n	8000ef0 <_free_r+0x24>
 8000f40:	d902      	bls.n	8000f48 <_free_r+0x7c>
 8000f42:	230c      	movs	r3, #12
 8000f44:	602b      	str	r3, [r5, #0]
 8000f46:	e7d3      	b.n	8000ef0 <_free_r+0x24>
 8000f48:	6820      	ldr	r0, [r4, #0]
 8000f4a:	1821      	adds	r1, r4, r0
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	bf04      	itt	eq
 8000f50:	6819      	ldreq	r1, [r3, #0]
 8000f52:	685b      	ldreq	r3, [r3, #4]
 8000f54:	6063      	str	r3, [r4, #4]
 8000f56:	bf04      	itt	eq
 8000f58:	1809      	addeq	r1, r1, r0
 8000f5a:	6021      	streq	r1, [r4, #0]
 8000f5c:	6054      	str	r4, [r2, #4]
 8000f5e:	e7c7      	b.n	8000ef0 <_free_r+0x24>
 8000f60:	bd38      	pop	{r3, r4, r5, pc}
 8000f62:	bf00      	nop
 8000f64:	20000098 	.word	0x20000098

08000f68 <_malloc_r>:
 8000f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f6a:	1ccd      	adds	r5, r1, #3
 8000f6c:	f025 0503 	bic.w	r5, r5, #3
 8000f70:	3508      	adds	r5, #8
 8000f72:	2d0c      	cmp	r5, #12
 8000f74:	bf38      	it	cc
 8000f76:	250c      	movcc	r5, #12
 8000f78:	2d00      	cmp	r5, #0
 8000f7a:	4606      	mov	r6, r0
 8000f7c:	db01      	blt.n	8000f82 <_malloc_r+0x1a>
 8000f7e:	42a9      	cmp	r1, r5
 8000f80:	d903      	bls.n	8000f8a <_malloc_r+0x22>
 8000f82:	230c      	movs	r3, #12
 8000f84:	6033      	str	r3, [r6, #0]
 8000f86:	2000      	movs	r0, #0
 8000f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f8a:	f000 f8f1 	bl	8001170 <__malloc_lock>
 8000f8e:	4921      	ldr	r1, [pc, #132]	; (8001014 <_malloc_r+0xac>)
 8000f90:	680a      	ldr	r2, [r1, #0]
 8000f92:	4614      	mov	r4, r2
 8000f94:	b99c      	cbnz	r4, 8000fbe <_malloc_r+0x56>
 8000f96:	4f20      	ldr	r7, [pc, #128]	; (8001018 <_malloc_r+0xb0>)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	b923      	cbnz	r3, 8000fa6 <_malloc_r+0x3e>
 8000f9c:	4621      	mov	r1, r4
 8000f9e:	4630      	mov	r0, r6
 8000fa0:	f000 f83c 	bl	800101c <_sbrk_r>
 8000fa4:	6038      	str	r0, [r7, #0]
 8000fa6:	4629      	mov	r1, r5
 8000fa8:	4630      	mov	r0, r6
 8000faa:	f000 f837 	bl	800101c <_sbrk_r>
 8000fae:	1c43      	adds	r3, r0, #1
 8000fb0:	d123      	bne.n	8000ffa <_malloc_r+0x92>
 8000fb2:	230c      	movs	r3, #12
 8000fb4:	6033      	str	r3, [r6, #0]
 8000fb6:	4630      	mov	r0, r6
 8000fb8:	f000 f8e0 	bl	800117c <__malloc_unlock>
 8000fbc:	e7e3      	b.n	8000f86 <_malloc_r+0x1e>
 8000fbe:	6823      	ldr	r3, [r4, #0]
 8000fc0:	1b5b      	subs	r3, r3, r5
 8000fc2:	d417      	bmi.n	8000ff4 <_malloc_r+0x8c>
 8000fc4:	2b0b      	cmp	r3, #11
 8000fc6:	d903      	bls.n	8000fd0 <_malloc_r+0x68>
 8000fc8:	6023      	str	r3, [r4, #0]
 8000fca:	441c      	add	r4, r3
 8000fcc:	6025      	str	r5, [r4, #0]
 8000fce:	e004      	b.n	8000fda <_malloc_r+0x72>
 8000fd0:	6863      	ldr	r3, [r4, #4]
 8000fd2:	42a2      	cmp	r2, r4
 8000fd4:	bf0c      	ite	eq
 8000fd6:	600b      	streq	r3, [r1, #0]
 8000fd8:	6053      	strne	r3, [r2, #4]
 8000fda:	4630      	mov	r0, r6
 8000fdc:	f000 f8ce 	bl	800117c <__malloc_unlock>
 8000fe0:	f104 000b 	add.w	r0, r4, #11
 8000fe4:	1d23      	adds	r3, r4, #4
 8000fe6:	f020 0007 	bic.w	r0, r0, #7
 8000fea:	1ac2      	subs	r2, r0, r3
 8000fec:	d0cc      	beq.n	8000f88 <_malloc_r+0x20>
 8000fee:	1a1b      	subs	r3, r3, r0
 8000ff0:	50a3      	str	r3, [r4, r2]
 8000ff2:	e7c9      	b.n	8000f88 <_malloc_r+0x20>
 8000ff4:	4622      	mov	r2, r4
 8000ff6:	6864      	ldr	r4, [r4, #4]
 8000ff8:	e7cc      	b.n	8000f94 <_malloc_r+0x2c>
 8000ffa:	1cc4      	adds	r4, r0, #3
 8000ffc:	f024 0403 	bic.w	r4, r4, #3
 8001000:	42a0      	cmp	r0, r4
 8001002:	d0e3      	beq.n	8000fcc <_malloc_r+0x64>
 8001004:	1a21      	subs	r1, r4, r0
 8001006:	4630      	mov	r0, r6
 8001008:	f000 f808 	bl	800101c <_sbrk_r>
 800100c:	3001      	adds	r0, #1
 800100e:	d1dd      	bne.n	8000fcc <_malloc_r+0x64>
 8001010:	e7cf      	b.n	8000fb2 <_malloc_r+0x4a>
 8001012:	bf00      	nop
 8001014:	20000098 	.word	0x20000098
 8001018:	2000009c 	.word	0x2000009c

0800101c <_sbrk_r>:
 800101c:	b538      	push	{r3, r4, r5, lr}
 800101e:	4d06      	ldr	r5, [pc, #24]	; (8001038 <_sbrk_r+0x1c>)
 8001020:	2300      	movs	r3, #0
 8001022:	4604      	mov	r4, r0
 8001024:	4608      	mov	r0, r1
 8001026:	602b      	str	r3, [r5, #0]
 8001028:	f7ff fb6a 	bl	8000700 <_sbrk>
 800102c:	1c43      	adds	r3, r0, #1
 800102e:	d102      	bne.n	8001036 <_sbrk_r+0x1a>
 8001030:	682b      	ldr	r3, [r5, #0]
 8001032:	b103      	cbz	r3, 8001036 <_sbrk_r+0x1a>
 8001034:	6023      	str	r3, [r4, #0]
 8001036:	bd38      	pop	{r3, r4, r5, pc}
 8001038:	200000bc 	.word	0x200000bc

0800103c <__sread>:
 800103c:	b510      	push	{r4, lr}
 800103e:	460c      	mov	r4, r1
 8001040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001044:	f000 f8a0 	bl	8001188 <_read_r>
 8001048:	2800      	cmp	r0, #0
 800104a:	bfab      	itete	ge
 800104c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800104e:	89a3      	ldrhlt	r3, [r4, #12]
 8001050:	181b      	addge	r3, r3, r0
 8001052:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001056:	bfac      	ite	ge
 8001058:	6563      	strge	r3, [r4, #84]	; 0x54
 800105a:	81a3      	strhlt	r3, [r4, #12]
 800105c:	bd10      	pop	{r4, pc}

0800105e <__swrite>:
 800105e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001062:	461f      	mov	r7, r3
 8001064:	898b      	ldrh	r3, [r1, #12]
 8001066:	05db      	lsls	r3, r3, #23
 8001068:	4605      	mov	r5, r0
 800106a:	460c      	mov	r4, r1
 800106c:	4616      	mov	r6, r2
 800106e:	d505      	bpl.n	800107c <__swrite+0x1e>
 8001070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001074:	2302      	movs	r3, #2
 8001076:	2200      	movs	r2, #0
 8001078:	f000 f868 	bl	800114c <_lseek_r>
 800107c:	89a3      	ldrh	r3, [r4, #12]
 800107e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001082:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001086:	81a3      	strh	r3, [r4, #12]
 8001088:	4632      	mov	r2, r6
 800108a:	463b      	mov	r3, r7
 800108c:	4628      	mov	r0, r5
 800108e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001092:	f000 b817 	b.w	80010c4 <_write_r>

08001096 <__sseek>:
 8001096:	b510      	push	{r4, lr}
 8001098:	460c      	mov	r4, r1
 800109a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800109e:	f000 f855 	bl	800114c <_lseek_r>
 80010a2:	1c43      	adds	r3, r0, #1
 80010a4:	89a3      	ldrh	r3, [r4, #12]
 80010a6:	bf15      	itete	ne
 80010a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80010aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80010ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80010b2:	81a3      	strheq	r3, [r4, #12]
 80010b4:	bf18      	it	ne
 80010b6:	81a3      	strhne	r3, [r4, #12]
 80010b8:	bd10      	pop	{r4, pc}

080010ba <__sclose>:
 80010ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010be:	f000 b813 	b.w	80010e8 <_close_r>
	...

080010c4 <_write_r>:
 80010c4:	b538      	push	{r3, r4, r5, lr}
 80010c6:	4d07      	ldr	r5, [pc, #28]	; (80010e4 <_write_r+0x20>)
 80010c8:	4604      	mov	r4, r0
 80010ca:	4608      	mov	r0, r1
 80010cc:	4611      	mov	r1, r2
 80010ce:	2200      	movs	r2, #0
 80010d0:	602a      	str	r2, [r5, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	f7ff fac7 	bl	8000666 <_write>
 80010d8:	1c43      	adds	r3, r0, #1
 80010da:	d102      	bne.n	80010e2 <_write_r+0x1e>
 80010dc:	682b      	ldr	r3, [r5, #0]
 80010de:	b103      	cbz	r3, 80010e2 <_write_r+0x1e>
 80010e0:	6023      	str	r3, [r4, #0]
 80010e2:	bd38      	pop	{r3, r4, r5, pc}
 80010e4:	200000bc 	.word	0x200000bc

080010e8 <_close_r>:
 80010e8:	b538      	push	{r3, r4, r5, lr}
 80010ea:	4d06      	ldr	r5, [pc, #24]	; (8001104 <_close_r+0x1c>)
 80010ec:	2300      	movs	r3, #0
 80010ee:	4604      	mov	r4, r0
 80010f0:	4608      	mov	r0, r1
 80010f2:	602b      	str	r3, [r5, #0]
 80010f4:	f7ff fad3 	bl	800069e <_close>
 80010f8:	1c43      	adds	r3, r0, #1
 80010fa:	d102      	bne.n	8001102 <_close_r+0x1a>
 80010fc:	682b      	ldr	r3, [r5, #0]
 80010fe:	b103      	cbz	r3, 8001102 <_close_r+0x1a>
 8001100:	6023      	str	r3, [r4, #0]
 8001102:	bd38      	pop	{r3, r4, r5, pc}
 8001104:	200000bc 	.word	0x200000bc

08001108 <_fstat_r>:
 8001108:	b538      	push	{r3, r4, r5, lr}
 800110a:	4d07      	ldr	r5, [pc, #28]	; (8001128 <_fstat_r+0x20>)
 800110c:	2300      	movs	r3, #0
 800110e:	4604      	mov	r4, r0
 8001110:	4608      	mov	r0, r1
 8001112:	4611      	mov	r1, r2
 8001114:	602b      	str	r3, [r5, #0]
 8001116:	f7ff facd 	bl	80006b4 <_fstat>
 800111a:	1c43      	adds	r3, r0, #1
 800111c:	d102      	bne.n	8001124 <_fstat_r+0x1c>
 800111e:	682b      	ldr	r3, [r5, #0]
 8001120:	b103      	cbz	r3, 8001124 <_fstat_r+0x1c>
 8001122:	6023      	str	r3, [r4, #0]
 8001124:	bd38      	pop	{r3, r4, r5, pc}
 8001126:	bf00      	nop
 8001128:	200000bc 	.word	0x200000bc

0800112c <_isatty_r>:
 800112c:	b538      	push	{r3, r4, r5, lr}
 800112e:	4d06      	ldr	r5, [pc, #24]	; (8001148 <_isatty_r+0x1c>)
 8001130:	2300      	movs	r3, #0
 8001132:	4604      	mov	r4, r0
 8001134:	4608      	mov	r0, r1
 8001136:	602b      	str	r3, [r5, #0]
 8001138:	f7ff facb 	bl	80006d2 <_isatty>
 800113c:	1c43      	adds	r3, r0, #1
 800113e:	d102      	bne.n	8001146 <_isatty_r+0x1a>
 8001140:	682b      	ldr	r3, [r5, #0]
 8001142:	b103      	cbz	r3, 8001146 <_isatty_r+0x1a>
 8001144:	6023      	str	r3, [r4, #0]
 8001146:	bd38      	pop	{r3, r4, r5, pc}
 8001148:	200000bc 	.word	0x200000bc

0800114c <_lseek_r>:
 800114c:	b538      	push	{r3, r4, r5, lr}
 800114e:	4d07      	ldr	r5, [pc, #28]	; (800116c <_lseek_r+0x20>)
 8001150:	4604      	mov	r4, r0
 8001152:	4608      	mov	r0, r1
 8001154:	4611      	mov	r1, r2
 8001156:	2200      	movs	r2, #0
 8001158:	602a      	str	r2, [r5, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	f7ff fac3 	bl	80006e6 <_lseek>
 8001160:	1c43      	adds	r3, r0, #1
 8001162:	d102      	bne.n	800116a <_lseek_r+0x1e>
 8001164:	682b      	ldr	r3, [r5, #0]
 8001166:	b103      	cbz	r3, 800116a <_lseek_r+0x1e>
 8001168:	6023      	str	r3, [r4, #0]
 800116a:	bd38      	pop	{r3, r4, r5, pc}
 800116c:	200000bc 	.word	0x200000bc

08001170 <__malloc_lock>:
 8001170:	4801      	ldr	r0, [pc, #4]	; (8001178 <__malloc_lock+0x8>)
 8001172:	f7ff be45 	b.w	8000e00 <__retarget_lock_acquire_recursive>
 8001176:	bf00      	nop
 8001178:	200000b4 	.word	0x200000b4

0800117c <__malloc_unlock>:
 800117c:	4801      	ldr	r0, [pc, #4]	; (8001184 <__malloc_unlock+0x8>)
 800117e:	f7ff be40 	b.w	8000e02 <__retarget_lock_release_recursive>
 8001182:	bf00      	nop
 8001184:	200000b4 	.word	0x200000b4

08001188 <_read_r>:
 8001188:	b538      	push	{r3, r4, r5, lr}
 800118a:	4d07      	ldr	r5, [pc, #28]	; (80011a8 <_read_r+0x20>)
 800118c:	4604      	mov	r4, r0
 800118e:	4608      	mov	r0, r1
 8001190:	4611      	mov	r1, r2
 8001192:	2200      	movs	r2, #0
 8001194:	602a      	str	r2, [r5, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	f7ff fa48 	bl	800062c <_read>
 800119c:	1c43      	adds	r3, r0, #1
 800119e:	d102      	bne.n	80011a6 <_read_r+0x1e>
 80011a0:	682b      	ldr	r3, [r5, #0]
 80011a2:	b103      	cbz	r3, 80011a6 <_read_r+0x1e>
 80011a4:	6023      	str	r3, [r4, #0]
 80011a6:	bd38      	pop	{r3, r4, r5, pc}
 80011a8:	200000bc 	.word	0x200000bc

080011ac <_init>:
 80011ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ae:	bf00      	nop
 80011b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011b2:	bc08      	pop	{r3}
 80011b4:	469e      	mov	lr, r3
 80011b6:	4770      	bx	lr

080011b8 <_fini>:
 80011b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ba:	bf00      	nop
 80011bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011be:	bc08      	pop	{r3}
 80011c0:	469e      	mov	lr, r3
 80011c2:	4770      	bx	lr
